' Resources:
' arcade.jpg - Teddy bear, Arcade, Claw machines image. Free for use. (https://pixabay.com/photos/teddy-bear-arcade-claw-machines-7558723/)
' bionic-bunny.jpg - Bionic Bunny Soldier by Zara
' bionic-bunny-commander.jpg - Bionic Bunny Commander by Zara
' book.png - Empty book by Darkmoon_Art (https://pixabay.com/illustrations/reserve-pages-empty-book-open-book-3057904/)
' boss-battle.mp3 - Neon Dreams: A Retro-Futuristic Synthwave Track - MP3 Mixdown (https://freesound.org/people/Robbnix/sounds/685538/)
' bunny.jpg -  Rabbit, Field, Animal image. Free for use. by SvenZiegler (https://pixabay.com/photos/rabbit-field-animal-field-hare-6063733/)
' bunny2.jpg - Hare, Animal, Mammal image. Free for use. by apnear40 (https://pixabay.com/photos/hare-animal-mammal-wildlife-fauna-8585802/)
' castle.mp3 - Royal vibes (harp guitar and tuba) (https://freesound.org/people/kbrecordzz/sounds/595865/)
' castle-interior.jpg - Ai Generated Gothic Castle royalty-free stock illustration. Free for use & download. (https://pixabay.com/illustrations/ai-generated-gothic-castle-room-8469399/)
' cat-meowing.mp3 - meow of a cat (https://freesound.org/people/lextrack/sounds/333916/)
' clouds.png - OpenClipart-Vectors (https://pixabay.com/vectors/sunrise-clouds-rising-sun-sky-sun-153600/)
' death.mp3 - Dramatic Scene Character Death Separation Melancholy Sadness (https://freesound.org/people/UNIVERSFIELD/sounds/697083/)
' dragon.mp3 - The Roar of a 5-Headed Dragon (https://freesound.org/people/bevibeldesign/sounds/366095/)
' dragon-water.gif - Dragon, Fire, Reptile GIF. Free for use. (https://pixabay.com/gifs/dragon-fire-reptile-water-sea-sky-3473/)
' elevator.wav - music elevator ext (https://freesound.org/people/Jay_You/sounds/467240/)
' elevator-doors.png - Krolestwo_Nauki (https://pixabay.com/vectors/elevator-elevator-door-building-6232385/)
' elevator-open.mp3 - Elevator ding door open close, noisy, 10.mp3 (https://freesound.org/people/TRP/sounds/576359/)
' epic.mp3 - Epic Trailer Background Music (https://freesound.org/people/Migfus20/sounds/560454/)
' fireball.mp3 - 8 Bit Fireball (https://freesound.org/people/Jofae/sounds/368511/)
' fluff.jpg - Gallant Sir Fluff on a mountain by Mr. Chris
' fluff2.jpg - Gallant Sir Fluff looking perplexed by Mr. Chris
' fluff.wav - Spanish Lick I, Acoustic- AB split stereo pair (Oktava).wav (https://freesound.org/people/debudding/sounds/44366/)
' game-over.mp3 - Game Over - low (https://freesound.org/people/MT4000/sounds/664606/)
' gianni.mp3 - bonfire flames sizzling (https://freesound.org/people/florianreichelt/sounds/563764/)
' gianni.jpg - Son of Fluff climbing a stair railing by Mr. Chris
' gianni2.jpg - Son of Fluff curled up on a blanket by Mr. Chris
' gold.png - Chest Coins Gold royalty-free vector graphic. Free for use & download. (https://pixabay.com/vectors/chest-coins-gold-lock-money-1293748/)
' grey.mp3 - 8-Bit Coin Or Power Up FX For Retro Video Games (https://freesound.org/people/Cloud-10/sounds/647977/)
' heavy-wings.mp3 - Wing Flap Heavy (prototype).mp3 (https://freesound.org/people/GearArcanaNo37/sounds/561364/)
' hit.mp3 - Hit with frying pan.mp3 (https://freesound.org/people/Whiprealgood/sounds/529567/)
' hit-harder.mp3 - frying pan.mp3 (https://freesound.org/people/Taira%20Komori/sounds/215017/)
' hooting.mp3 - Desert Owl (https://freesound.org/people/claytron3000/sounds/384186/)
' inventory.mp3 - Cash Register (https://freesound.org/people/kiddpark/sounds/201159/)
' magic.mp3 - Magic.mp3 (https://freesound.org/people/Bastianhallo/sounds/434050/)
' magic-humming.mp3 - Magical Humming Ambiance. (https://freesound.org/people/SnowFightStudios/sounds/670641/)
' magic-chimes.mp3 - a mystical enclosed bell (https://freesound.org/people/kdemani/sounds/635328/)
' minigames.mp3 - video game menu music (https://freesound.org/people/magmadiverrr/sounds/661248/)
' mushroom.jpg - Crystal, Mushroom, Purple mushroom image. Free for use. by Fractals99 (https://pixabay.com/photos/crystal-mushroom-purple-mushroom-7428278/)
' mylee.jpg - Mylee Marie by Mr. Chris
' night-owl.jpg - Scary, Owl, Eyes image. Free for use. by Skitterphoto (https://pixabay.com/photos/scary-owl-eyes-spooky-halloween-3595742/)
' night-owl-flying.png - Owl Bird Nature royalty-free vector graphic. Free for use & download. (https://pixabay.com/vectors/owl-bird-geometric-animal-wings-5986451/)
' old-books.jpg - Old books, Book, Old image. Free for use. by jarmoluk (https://pixabay.com/photos/old-books-book-old-library-436498/)
' points.mp3 - 320655__rhodesmas__level-up-01.mp3 (https://freesound.org/people/shinephoenixstormcrow/sounds/337049/)
' scream.mp3 - Human Death Scream.mp3 (https://freesound.org/people/DjCHAOS/sounds/77148/)
' select-player.png - Image by johngelling from Pixabay (https://pixabay.com/vectors/people-man-woman-child-boy-girl-1886412/)
' select-player-grey.png - Image by johngelling from Pixabay (https://pixabay.com/vectors/people-man-woman-child-boy-girl-1886412/)
' select-player-zara.png - Image by johngelling from Pixabay (https://pixabay.com/vectors/people-man-woman-child-boy-girl-1886412/)
' store.jpg - Shoe repair, Shop, Store image. Free for use. (https://pixabay.com/photos/shoe-repair-shop-store-guerrande-2498429/)
' suspense.mp3 - Drone Background Music (https://freesound.org/people/Migfus20/sounds/561085/)
' turn-page.mp3 - page turn (https://freesound.org/people/partheeban/sounds/457767/)
' wayne-chung.jpg - Image of Wayne Chung wondering what's going on
' wayne-chung.mp3 - Wang Chung "Everybody Have Fun Tonight" snippet
' wilderness.jpg and wilderness-full.jpg - Nature, Fog, Travel image. Free for use. by jameswheeler (https://pixabay.com/photos/nature-fog-travel-foggy-haze-mist-3787200/)
' wilderness2.jpg - Flow, Forest, Landscape image. Free for use. by jggrz (https://pixabay.com/photos/flow-forest-landscape-nature-4689820/)
' wilderness3.jpg and wilderness3-small.jpg - Ai Generated Meadow Mountain royalty-free stock illustration. Free for use & download. (https://pixabay.com/illustrations/ai-generated-meadow-mountain-8190587/)
' wilderness.mp3 - birds_210513_0088.mp3 (https://freesound.org/people/titi2/sounds/571247/)
' wind.mp3 - A 1 min. 25 sec. raw audio mp3 recording of a rather strong-sounding wind blowing through pine trees. The wind eventually gets a little lighter toward the end of the recording. Includes a bit of breeze on the microphone but only enough to add to the effect. Recorded with a black Sony IC digital voice recorder. (https://freesound.org/people/FunWithSound/sounds/390740/)
' wooden-sign.png - Sign Wood Wooden royalty-free vector graphic. Free for use & download. (https://pixabay.com/vectors/sign-wood-wooden-brown-rustic-576261/)
' woods.jpg - Secret, Forest, Darkness image. Free for use. by jplenio (https://pixabay.com/photos/secret-forest-darkness-nature-3120483/)
' woods2.jpg - Forest, Darkness, Trees image. Free for use. by Tomegos (https://pixabay.com/photos/forest-darkness-trees-dark-nature-7543646/)
' woods.mp3 - forestsurroundings.mp3 (https://freesound.org/people/Luftrum/sounds/48411/)
' zara.mp3 - 050816 a crowded grocery store Sapporo.mp3 (https://freesound.org/people/pflanigan/sounds/390254/)

' Declare that arrays are dynamic
Rem $DYNAMIC

' Define collection events as shared, constant values
Const CREATE = 1, RETRIEVE = 2, UPDATE = 3, DELETE = 4

' Define player names as shared, constant values
Const GREYSON = "GREYSON", GREY = "GREY", ZARA = "ZARA"

Type Variable
    id As Integer
    name As String
    type As String
    value As String
End Type

Type TextCursor
    lastColumn As Integer
    lastControlRow As Integer
    lastStoryRow As Integer
End Type

Type Scene
    id As Integer
    color As Long
    name As String
    sound As String
End Type

Type MapDirections
    north As Integer
    east As Integer
    south As Integer
    west As Integer
End Type

' TODO - Extract map properties into a new Map type
Type Book
    author As String
    basicStoryChoices As String
    chapter As String
    controlChoices As String
    controlChoicesColumn As Integer
    controlChoicesRow As Integer
    credits As String
    cursor As TextCursor
    deathHitSound As Long
    directions As MapDirections
    doorX As Integer
    doorY As Integer
    experiencePoints As Integer
    firstRow As Integer
    heavyHitSound As Long
    highScores As String
    hitPoints As Integer
    hitSound As Long
    image As Long
    inventory As String
    inventorySound As Long
    isOver As Integer
    isRightHanded As Integer
    lastRow As Integer
    leftPageStartingColumn As Integer
    level As Integer
    levelSize As Integer
    magicPoints As Integer
    maxPageLength As Integer
    openingMusic As String
    pageNumber As Integer
    pageTurnSound As Long
    player As String
    playerDirection As Integer
    playerX As Integer
    playerY As Integer
    pointsSound As Long
    rightPageStartingColumn As Integer
    score As Integer
    secretChoices As String
    story As String
    storyChoices As String
    storyChoicesColumn As Integer
    storyChoicesRow As Integer
    storyFile As String
    storySound As Long
    title As String
    twin As String
    version As String
End Type

' Initialize the game
Dim game As Book
game.directions.north = 1
game.directions.east = 2
game.directions.south = 3
game.directions.west = 4
game.version = "0.1.1"
game.chapter = ""
game.isOver = 0
game.isRightHanded = 1 ' Are the game controls on the right page? (1/0)
game.image = _LoadImage("book.png", 32)
game.firstRow = 3 ' book.png allows for row 3 as the first row for text
game.lastRow = 46 ' book.png allows for row 46 as the last row for text
game.leftPageStartingColumn = 15 ' book.png allows for column 15 as the first column for starting text on the left page
game.rightPageStartingColumn = 83 ' book.png allows for column 83 as the first column for starting text on the right page
game.maxPageLength = 66 ' book.png allows for 66 characters of text on a single line of a single page
game.controlChoicesColumn = 0
game.controlChoicesRow = 0
game.storyChoices = "" ' current choices for the player
game.storyChoicesColumn = 0
game.storyChoicesRow = 0
game.player = "" ' GREYSON or ZARA
game.controlChoices = "CREDITS,FLIP BOOK,HIGH SCORES,EXIT GAME"
game.basicStoryChoices = "LOOK,LISTEN"
game.secretChoices = "MOVE AHEAD,MOVE BACKWARDS,TURN LEFT,TURN RIGHT,ALL THE THINGS"
game.score = 0
game.inventory = ""
game.storySound = 0
game.hitPoints = 100
game.magicPoints = 0
game.experiencePoints = 0

' Configure application window
_Title "Twin Quest " + game.version ' Set the application window's title
$Resize:On
'$Resize:Smooth
' TODO - $Resize:Smooth would be nice, but it cuts off the top of the book image and dorks with mouse coordinates tracking

' Display "splash screen"
Call DisplaySplashScreen(game)

' Initialize common sounds
game.hitSound = _SndOpen("hit.mp3")
game.heavyHitSound = _SndOpen("hit-harder.mp3")
game.deathHitSound = _SndOpen("fireball.mp3")
game.inventorySound = _SndOpen("inventory.mp3")
game.pointsSound = _SndOpen("points.mp3")

' Display pre-chapter pages with epic music
game.pageTurnSound = PlaySound&("turn-page.mp3", 1, 0)
game.chapter = "SELECT STORY"
Call LoadStory(game)
game.storySound = PlaySound&(game.openingMusic, 1, 1)
game.chapter = ""
Call DisplayTitlePage(game)
game.chapter = "CREDITS"
Call DisplayCreditsPage(game)
game.chapter = "HIGH SCORES"
Call DisplayHighScoresPage(game)
game.chapter = "SELECT MAIN CHARACTER"
Call DisplaySelectPlayerPage(game)

' Start the story
game.chapter = "INTRODUCTION"
game.pageNumber = 1
game.storyChoices = game.basicStoryChoices

' Main game loop
choice$ = ""
Do
    Call RefreshStoryPage(game, choice$)
    Call RefreshControlPage(game)

    If game.hitPoints = 0 Then
        game.isOver = 1
    End If

    If game.isOver Then
        Call PressAnyKey(game, 0)
        Call TurnPage(game, 0)
        _Continue
    End If

    Color _RGB(0, 0, 0)

    ' TODO - Refactor this to be a re-usable story mode that activates before the story prompt
    If game.chapter = "INTRODUCTION" Then
        'Call DisplayIntroduction(game)

        ' TODO - Experimental redirect to the new story engine, DisplayStoryPage()
        ' TODO - Have DisplayScene() do this
        Dim introduction As Scene
        Call WorldScene(RETRIEVE, 1, 0, 0, 0, introduction)
        Call WorldScenePage(RETRIEVE, introduction.id, game.pageNumber, pageContents$)
        Call DisplayStoryPage(game, introduction, pageContents$, "", 1)

        If game.chapter = "CHAPTER 1" Then
            ' Every first step in every great adventure is... a first step
            game.level = 1
            choice$ = "MOVE AHEAD"
        End If
    Else
        ' Prompt for choice
        game.pageNumber = 1
        Locate game.cursor.lastStoryRow + 1, 1
        choice$ = StoryPrompt$(game, "Story Choices", game.storyChoices, 1, 1, 40)
    End If
Loop While game.isOver = 0

Call StopSound(game.storySound)

If game.hitPoints = 0 Then
    Call PrintPageText(game, "story", CsrLin, "You have died.")
    Print
    game.storySound = PlaySound&("death.mp3", 1, 1)
End If

gameOverSound& = PlaySound&("game-over.mp3", 1, 0)

' Check if the player has earned a spot on the HIGH SCORES list
If game.score > 0 Then
    Call ChallengeHighScores(game)
End If

Locate game.cursor.lastStoryRow + 2, 1
Call PrintPageText(game, "story", CsrLin, " _____ _            _____           _")
Call PrintPageText(game, "story", CsrLin, "|_   _| |__   ___  | ____|_ __   __| |")
Call PrintPageText(game, "story", CsrLin, "  | | | '_ \ / _ \ |  _| | '_ \ / _` |")
Call PrintPageText(game, "story", CsrLin, "  | | | | | |  __/ | |___| | | | (_| |")
Call PrintPageText(game, "story", CsrLin, "  |_| |_| |_|\___| |_____|_| |_|\__,_|")
Call PrintPageText(game, "story", CsrLin + 1, "(Press any key to exit the program)")
Sleep

System ' Ends the program immediately and closes the application window

Sub AllTheThingsAction (game As Book)
    thingDone% = 0
    Dim variable As Variable

    If game.level = 1 Then
        variable.name = "isDragonDead"
        Call StoryVariable(RETRIEVE, variable)
        If variable.value = "0" Then
            variable.value = "1"
            Call StoryVariable(UPDATE, variable)
            Call IncreaseScore(game, 100)
            Call PrintPageText(game, "story", CsrLin, "You slew the dragon!")
            thingDone% = 1
        End If
        variable.name = "isDragonDead"
        Call StoryVariable(RETRIEVE, variable)
        If variable.value = "0" Then
            variable.value = "1"
            Call StoryVariable(UPDATE, variable)
            Call IncreaseScore(game, 100)
            Call PrintPageText(game, "story", CsrLin, "You tamed the elusive cat!")
            thingDone% = 1
        End If
        If Not Contains%(game.inventory, "RING OF TAMING", ",") Then
            Call IncreaseInventory(game, "RING OF TAMING")
            Call PrintPageText(game, "story", CsrLin, "You obtained the Ring of Taming!")
            Call PrintPageText(game, "story", CsrLin, "(Does not work on large creatures.)")
            thingDone% = 1
        End If
        If Not Contains%(game.inventory, "GOLD", ",") Then
            Call IncreaseInventory(game, "GOLD")
            Call IncreaseScore(game, 100)
            Call PrintPageText(game, "story", CsrLin, "You obtained the Gold!")
            thingDone% = 1
        End If
        If (game.player = "GREYSON") And (Not Contains%(game.inventory, "UNO REVERSE", ",")) Then
            Call IncreaseInventory(game, "UNO REVERSE")
            Call PrintPageText(game, "story", CsrLin, "You obtained the legendary UNO Reverse card!")
            thingDone% = 1
        End If
        If (game.player = "ZARA") And (Not Contains%(game.inventory, "SWORD", ",")) Then
            Call IncreaseInventory(game, "SWORD")
            Call PrintPageText(game, "story", CsrLin, "You obtained the legendary SWORD!")
            thingDone% = 1
        End If
        If thingDone% = 0 Then
            Call PrintPageText(game, "story", CsrLin, "You have done all the things for level " + LTrim$(Str$(game.level)) + ".")
        End If
    End If
End Sub

' TODO - Add parameters for making this as dynamic as possible
' TODO - Add parameter for making the monster invisible
Sub ArcadeShooter (game As Book)
    'Sub ArcadeShooter (game As Book, playerImageFile As String, playerAttackImageFile As String, monsterImageFile As String, monsterAttackImageFile As String, monsterAttackSoundFile As String)
    ' TODO - Copy book image starting with current row and column
    currentCol% = Pos(0)
    currentRow% = CsrLin
    ' TODO - Add image for background
    nightOwl& = _LoadImage("night-owl-flying.png")
    ' TODO - Load different fireball images

    Randomize Timer
    randomNumber% = Int(Rnd * 400) + 1
    monsterDestinationX% = nightOwlX% + randomNumber%

    ' Hoot
    monsterSound1& = PlaySound&("hooting.mp3", 1, 0)
    'monsterSound2& = PlaySound&("heavy-wings.mp3", 1, 0)
    ' Cool boss battle music
    storySound& = PlaySound&("boss-battle.mp3", 1, 1)

    image& = _LoadImage("wilderness3.jpg")
    imageRow% = CsrLin
    Call DisplayImage(game, "story", image&)
    _FreeImage image&
    Call RefreshControlPage(game)
    Print
    Call PrintPageText(game, "control", CsrLin, "To move, use the LEFT and RIGHT arrow keys.")
    Call PrintPageText(game, "control", CsrLin, "To shoot, use the SPACE keys.")

    startingScreen& = _CopyImage(0)

    nightOwlX% = 150
    nightOwlY% = ((imageRow%) * _FontHeight) + 10 ' TODO - Calculate the start of the background image and add a buffer so that the monster is inside of the background image
    direction% = 1

    Do
        _Limit 30 ' 30 frames per second
        Cls
        _PutImage , startingScreen&
        _PutImage (nightOwlX%, nightOwlY%), nightOwl&

        ' Move monster
        If direction% = 1 Then ' Move right
            nightOwlX% = nightOwlX% + 2
            If nightOwlX% > monsterDestinationX% Then
                Call ReplaySound(monsterSound1&, 1, 0)
                direction% = 2
                ' TODO - Randomly compute number of iterations until next change (will need to compute edge in that direction for going too far)
                randomNumber% = Int(Rnd * 400) + 1
                monsterDestinationX% = nightOwlX% - randomNumber%
                If monsterDestinationX% < 150 Then
                    monsterDestinationX% = 150
                End If
            End If
        End If
        If direction% = 2 Then ' Move left
            nightOwlX% = nightOwlX% - 2
            If nightOwlX% < monsterDestinationX% Then
                Call ReplaySound(monsterSound1&, 1, 0)
                direction% = 1
                ' TODO - Randomly compute number of iterations until next change
                randomNumber% = Int(Rnd * 400) + 1
                monsterDestinationX% = nightOwlX% + randomNumber%
                If monsterDestinationX% > 550 Then
                    monsterDestinationX% = 550
                End If
            End If
        End If

        ' TODO - If direction changed, play monster sound and start new volley of fireballs

        ' TODO - For each fireball, compute the new x-y using that fireball's angle and draw the fireball at that location

        ' Draw screen
        _Display ' update screen with changes
    Loop Until _KeyDown(27)

    _AutoDisplay ' Automatically update the screen with changes
    _PutImage , startingScreen&
    _FreeImage startingScreen&
    _FreeImage nightOwl&
    Call StopSound(monsterSound1&)
    Call StopSound(storySound&)
    Locate currentRow%, currentCol%
End Sub

' Capture the graphical area for a given text region
'
' Parameters:
' game - Book instance
' startColumn - First column of text
' startRow - First row of text
' endColumn - Last column of text
' endRow - Last row of text
'
' Returns:
' Image handle
Function CaptureTextArea& (game As Book, startColumn As Integer, startRow As Integer, endColumn As Integer, endRow As Integer)
    ' Convert text columns and rows to graphical x-y coordinates
    x1% = (startColumn - 1) * _FontWidth
    x2% = endColumn * _FontWidth
    y1% = (startRow - 1) * _FontHeight
    y2% = endRow * _FontHeight
    CaptureTextArea& = _NewImage(x2% - x1%, y2% - y1%, 32) ' Init the text area

End Function

' Challenge the current set of high scores
'
' Parameters:
' game - Book instance
Sub ChallengeHighScores (game As Book)
    Dim highScores(1 To 10) As String
    For i% = 1 To 10
        highScores(i%) = ""
    Next i%
    rank% = 0
    If game.highScores <> "" Then
        highScoresCount% = ListLength%(game.highScores, "<br>")
        index% = 1
        For i% = 1 To highScoresCount%
            highScore$ = ListPiece$(game.highScores, "<br>", i%)
            score% = Val(ListPiece$(highScore$, "   ", 1))
            initials$ = ListPiece$(highScore$, "   ", 2)
            scoreDate$ = ListPiece$(highScore$, "   ", 3)
            If (rank% = 0) And (game.score > score%) Then
                rank% = index%
                index% = index% + 1 ' Move Over, Beethoven
            End If
            If index% <= 10 Then
                highScores(index%) = highScore$
            End If
            index% = index% + 1
        Next i%
    Else
        rank% = 1
    End If

    If rank% = 0 Then
        Exit Sub
    End If

    Print
    Call PrintPageText(game, "story", game.cursor.lastStoryRow + 2, "You have a new high score... rank " + LTrim$(Str$(rank%)) + "!")
    highScoreInitials$ = ""
    While Len(highScoreInitials$) <> 3
        ' TODO - Only alphanumeric characters should be allowed
        highScoreInitials$ = GetInput$(game, "Enter your initials", 0, 0, 3)
    Wend
    highScores(rank%) = LTrim$(Str$(game.score)) + "   " + highScoreInitials$ + "   " + Date$

    ' TODO - Read each file line and stop at the high scores
    Dim storyFile(1 To 1000) As String
    i% = 0
    Open game.storyFile For Input As #1
    Do Until EOF(1)
        Input #1, fileLine$
        If fileLine$ = "[high scores]" Then
            Exit Do
        End If
        i% = i% + 1
        storyFile(i%) = fileLine$
    Loop
    Close #1

    game.highScores = ""
    Open game.storyFile For Output As #1
    For j% = 1 To i%
        If InStr(1, storyFile(j%), ",") > 0 Then
            ' TODO - If the line contains a double quote, escape it
            Print #1, Chr$(34) + storyFile(j%) + Chr$(34) ' Restore the original file contents
        Else
            Print #1, storyFile(j%) ' Restore the original file contents
        End If
    Next j%
    Print #1, "[high scores]"
    For i% = 1 To 10
        If (highScores(i%) <> "") Then
            Print #1, highScores(i%)
            If game.highScores <> "" Then
                game.highScores = game.highScores + "<br>"
            End If
            game.highScores = game.highScores + highScores(i%)
        End If
    Next i%
    Close #1

    Call DisplayHighScoresPage(game)
End Sub

' Does a string contain a given token? (1/0)
'
' Parameters:
' myString - String to search
' token - Token to find
' delimiter - String delimiting the tokens, if any
'
' Returns:
' Token was found? (1/0)
Function Contains% (myString As String, token As String, delimiter As String)
    Contains% = InStr(1, (delimiter + myString + delimiter), (delimiter + token + delimiter)) > 0
End Function

' Decrease the player's hit points
'
' Parameters:
' game - Book instance
' points - Number of points by which to decrease the player's hit points
Sub DecreaseHitPoints (game As Book, points As Integer)
    game.hitPoints = game.hitPoints - points
    If game.hitPoints < 0 Then
        game.hitPoints = 0
        game.score = 0
    End If
    If points <= 10 Then
        Call ReplaySound(game.hitSound, 1, 0)
    Else
        If points <= 25 Then
            Call ReplaySound(game.heavyHitSound, 1, 0)
        Else
            Call ReplaySound(game.deathHitSound, 1, 0)
        End If
    End If

    currentColumn% = Pos(0)
    currentRow% = CsrLin
    screenImage& = _CopyImage(0)
    redScreen& = _NewImage(_Width, _Height, 32)
    Screen redScreen&
    Cls , _RGB(255, 0, 0) ' Clear screen with red as the background color
    _Delay 0.25 ' Suspend program execution for a half second
    _PutImage , screenImage&, 0 ' Restore the application screen
    _PrintMode _KeepBackground ' Preserve the image background when printing text
    _FreeImage screenImage& ' Free up memory
    Locate currentRow%, currentColumn% ' Restore the current text row and column

    storyColor& = _DefaultColor
    Color _RGB(255, 140, 0)
    Call PrintPageText(game, "story", CsrLin + 1, "HP -" + LTrim$(Str$(points)))
    storyRow% = CsrLin
    Call RefreshControlPage(game)
    Color storyColor&
    Locate storyRow%, 1
End Sub

' Get files in current directory
'
' (Copied and modified from QB64 help to support Linux filesystems and not used Shared variables)
'
' Parameters:
' [spec] - File spec (ie, "*.txt").  Use empty string to return other files from last call.
' fileCount - Count of files in directory
'
' Returns:
' Last file discovered (decrements index each time this function is called)
Function DIR$ (spec As String, fileCount As Integer)
    Const TmpFile$ = "DIRINF0.TMP", ListMAX% = 500 'change maximum to suit your needs
    Static Ready%, Index%, DirList$()
    If Not Ready% Then ReDim DirList$(ListMAX%): Ready% = -1 'DIM array first use
    If spec$ > "" Then 'get file names when a spec is given
        If _OS$ = "WINDOWS" Then
            Shell _Hide "DIR " + spec$ + " /b > " + TmpFile$
        Else
            Shell _Hide "ls " + spec$ + " > " + TmpFile$
        End If
        Index% = 0: DirList$(Index%) = "": ff% = FreeFile
        Open TmpFile$ For Append As #ff%
        size& = LOF(ff%)
        Close #ff%
        If size& = 0 Then Kill TmpFile$: Exit Function
        Open TmpFile$ For Input As #ff%
        Do While Not EOF(ff%) And Index% < ListMAX%
            Index% = Index% + 1
            Line Input #ff%, DirList$(Index%)
        Loop
        fileCount = Index% 'SHARED variable can return the file count
        Close #ff%
        Kill TmpFile$
    Else
        If Index% > 0 Then
            Index% = Index% - 1 'no spec sends next file name
        End If
    End If
    DIR$ = DirList$(Index%)
End Function

' Display the credits page
'
' Parameters:
' game - Book instance
Sub DisplayCreditsPage (game As Book)
    Call TurnPage(game, 1)
    Dim scene As Scene
    scene.name = "CREDITS"
    scene.color = _RGB(0, 0, 0)
    Call DisplayStoryPage(game, scene, game.credits, "", 1)
    Call PressAnyKey(game, 0)
End Sub

' Display the high scores page
'
' Parameters:
' game - Book instance
Sub DisplayHighScoresPage (game As Book)
    Call TurnPage(game, 1)

    If game.highScores <> "" Then
        Dim scene As Scene
        scene.name = "HIGH SCORES"
        scene.color = _RGB(0, 0, 0)
        Call DisplayStoryPage(game, scene, game.highScores, "", 1)
    Else
        Call PrintPageText(game, "story", CsrLin, "N/A")
    End If

    If game.isOver = 0 Then
        Call PressAnyKey(game, 0)
    End If
End Sub

' Display an image on a designated book page
'
' Parameters:
' game - Book instance
' page - (STORY/CONTROL) Which page of the book to use
' image - Image to display
Sub DisplayImage (game As Book, page As String, image As Long)
    ' Determine left edge of the designated page
    page = UCase$(page)
    If ((page = "STORY") And (game.isRightHanded = 1)) Or ((page = "CONTROL") And (game.isRightHanded = 0)) Then
        leftColumn% = game.leftPageStartingColumn
    Else
        If ((page = "STORY") And (game.isRightHanded = 0)) Or ((page = "CONTROL") And (game.isRightHanded = 1)) Then
            leftColumn% = game.rightPageStartingColumn
        Else
            If 1 / 0 Then
                ' Let the programmer know that they dorked things
            End If
        End If
    End If

    ' Calculate the top-left edge of the image
    centerColumn% = Int(leftColumn% + (game.maxPageLength / 2)) ' Calculate the middle column on the page
    imageWidth% = _Width(image)
    imageHeight% = _Height(image)
    imageColumn% = centerColumn% - Int((imageWidth% / _FontWidth) / 2) - 1
    imageRow% = CsrLin
    imageX% = imageColumn% * _FontWidth
    imageY% = imageRow% * _FontHeight
    _PutImage (imageX%, imageY%), image

    ' Move the cursor to the next row after the image
    nextRow% = imageRow% + _Ceil(imageHeight% / _FontHeight) + 1
    Locate nextRow%, leftColumn%
End Sub

Sub DisplayScene (game As Book, scene As Scene)
    ' TODO - For each page in a scene, call DisplayStoryPage()
End Sub

' Display the select player page
'
' Parameters:
' game - Book instance
Sub DisplaySelectPlayerPage (game As Book)
    ' TODO - Add the ability to hover over a portion of the image to highlight one of the players and let a mouse click auto-select that player
    ' TODO - Display a brief description of the highlighted player
    selectPlayerImage& = _LoadImage("select-player.png")
    turnPageSound% = 1

    Do
        Call TurnPage(game, turnPageSound%)
        Call DisplayImage(game, "story", selectPlayerImage&)
        game.player = StoryPrompt$(game, "Player Choices", GREYSON + "," + ZARA, 0, 1, 7)
        turnPageSound% = 0 ' If the player enters an incorrect choice and the page is turned to reset the screen, be silent
    Loop While Not Contains%(game.storyChoices + "," + GREY, game.player, ",")

    If game.player = ZARA Then
        game.twin = GREYSON
    Else
        game.twin = ZARA
    End If

    _FreeImage selectPlayerImage&
End Sub

' Display the splash screen
'
' Parameters:
' game - Book instance
Sub DisplaySplashScreen (game As Book)
    ' Play Wayne Chung's theme song
    game.storySound = PlaySound&("wayne-chung.mp3", 1, 0)
    ' Display Wayne Chung's picture
    Cls
    wayneChungImage& = _LoadImage("wayne-chung.jpg", 32) 'load the image file to be drawn
    Screen wayneChungImage&
    _ScreenMove ((_DesktopWidth \ 2) - (_Width \ 2)) - 3, ((_DesktopHeight \ 2) - (_Height \ 2)) - 29 - 400 ' Center the application window (400 offsets two stacked monitors)
    ' Display overlay text
    Color _RGB(0, 0, 0)
    _PrintMode _KeepBackground
    Locate 7, 2
    Print "Wayne Chung Enterprises"
    Locate 9, 9
    Print "presents"
    Locate 46, 2
    ' Suspend program execution for 5 seconds or until the user presses the any key
    Sleep 5
    ' Stop playing Wayne Chung's theme music and remove his picture (New screen must be set without Chung's picture before it is free'ed)
    StopSound game.storySound

    ' Display the book picture so Wayne Chung's picture can be freed from memory
    Screen _NewImage(1280, 793, 32)
    Cls , _RGB(0, 0, 0)
    _PutImage , game.image
    _FreeImage wayneChungImage& ' Free up memory used by the image
End Sub

' Display a single story page
'
' Parameters:
' game - Book instance
' scene - Scene instance
' page - Story text and supported tags
' [action] - Pre-selected action
' [startAtTop] - Start displaying at the top of the story page? (1/0)
Sub DisplayStoryPage (game As Book, scene As Scene, page As String, action As String, startAtTop As Integer)
    Dim soundsFiles$(1 To 100)
    Dim soundsHandles&(1 To 100)
    Dim variable As Variable
    soundsCount% = 0
    subsection$ = ""
    startingAction$ = action

    If scene.color = _RGB(255, 255, 255) Then
        Color _RGB(0, 0, 0) ' For readability, never use white text on the book
    Else
        Color scene.color
    End If
    If startAtTop Then
        Locate game.firstRow + 2, 1
    End If

    If action = "LOOK" Then
        ' Let the player know where they are
        Color _RGB(0, 0, 0)
        Call PrintPageText(game, "story", CsrLin, "You are in ")
        If scene.color = _RGB(255, 255, 255) Then
            Color _RGB(0, 0, 0) ' For readability, never use white text on the book
        Else
            Color scene.color
        End If
        Locate CsrLin - 1, game.cursor.lastColumn + Len("You are in ")
        Print scene.name
        Color _RGB(0, 0, 0)
        Locate CsrLin - 1, game.cursor.lastColumn + Len("You are in " + scene.name)
        Print "."

        ' Let the player know what lies ahead
        aheadX% = game.playerX
        aheadY% = game.playerY
        If game.playerDirection = game.directions.north Then
            aheadY% = aheadY% - 1
        End If
        If game.playerDirection = game.directions.east Then
            aheadX% = aheadX% + 1
        End If
        If game.playerDirection = game.directions.south Then
            aheadY% = aheadY% + 1
        End If
        If game.playerDirection = game.directions.west Then
            aheadX% = aheadX% - 1
        End If
        If (aheadX% = game.doorX) And (aheadY% = game.doorY) Then
            Color _RGB(0, 0, 0) ' TODO - This should be scene 0,0,0's color
            Call PrintPageText(game, "story", CsrLin, "Ahead you see an elevator.  Perhaps an exit to this world?")
        Else
            If (aheadX% = 0) Or (aheadX% = (game.levelSize + 1)) Or (aheadY% = 0) Or (aheadY% = (game.levelSize + 1)) Then
                Color _RGB(0, 0, 0)
                Call PrintPageText(game, "story", CsrLin, "There is nothing ahead.  You are facing the edge of the world.")
            Else
                Color _RGB(0, 0, 0)
                Dim nextScene As Scene
                Call WorldScene(RETRIEVE, 1, game.level, aheadX%, aheadY%, nextScene)
                Call PrintPageText(game, "story", CsrLin, "Ahead you see ")
                If nextScene.color = _RGB(255, 255, 255) Then
                    Color _RGB(0, 0, 0) ' For readability, never use white text on the book
                Else
                    Color nextScene.color
                End If
                Locate CsrLin - 1, game.cursor.lastColumn + Len("Ahead you see ")
                Print nextScene.name
                Color _RGB(0, 0, 0)
                Locate CsrLin - 1, game.cursor.lastColumn + Len("Ahead you see " + nextScene.name)
                Print "."
            End If
        End If

        If scene.color = _RGB(255, 255, 255) Then
            Color _RGB(0, 0, 0) ' For readability, never use white text on the book
        Else
            Color scene.color
        End If

        Print
    End If

    divCount% = ListLength%(page, "<div>")
    isExitSet% = 0
    For i% = 1 To divCount%
        div$ = ListPiece$(page, "<div>", i%)
        div$ = LTrim$(RTrim$(div$))
        divListLength% = Len(div$)
        storyText$ = ""
        remainingDiv$ = div$
        'If action <> "" Then
        If Left$(remainingDiv$, 2) = "[[" Then
            subsection$ = ListPiece$(remainingDiv$, "]]", 1)
            subsection$ = ListPiece$(subsection$, "[[", 2)
            _Continue ' Don't actually print the name of the subsection
        End If
        If subsection$ <> action Then
            _Continue
        End If
        'End If
        ' Process all tags in the division
        Do
            tag$ = GetTag$(remainingDiv$, tagStart%, tagEnd%, tagValue$)

            If tag$ <> "" Then
                storyText$ = storyText$ + Left$(remainingDiv$, tagStart% - 1)
                remainingDiv$ = Mid$(remainingDiv$, tagEnd% + 1, Len(remainingDiv$))

                ' Supported Tags:
                ' <arcade-shooter>
                ' <br>/<break>
                ' <choices-add CHOICE1+CHOICE2+CHOICE3...>
                ' <choices-remove CHOICE1+CHOICE2+CHOICE3...>
                ' <color RED+BLUE+GREEN/STORY>
                ' <end-page>
                ' <get-input LABEL:CHOICE1+CHOICE2+CHOICE3...>
                ' <goto-chapter CHAPTER>
                ' <hp-remove POINTS>
                ' <if-game-variable PLAYER/TODO>
                ' <if-inventory-contains ITEM>
                ' <if-story-variable VARIABLE>
                ' <image IMAGE1+IMAGE2+IMAGE3...>
                ' <inventory-add ITEM1+ITEM2+ITEM3...>
                ' <play-sound SOUND1+SOUND2+SOUND3...>
                ' <player>
                ' <press-any-key>
                ' <quote>
                ' <random COUNT>
                ' <score-add POINTS>
                ' <set-story-variable VARIABLE=VALUE>
                ' <stop-sound SOUND1+SOUND2+SOUND3...>
                ' <story-prompt LABEL:CHOICE1+CHOICE2+CHOICE3...>
                ' <story-sound SOUND>
                ' <story-variable VARIABLE>
                ' <turn-page>
                ' <twin>
                ' <unbreak>

                If (tag$ = "arcade-shooter") Then
                    ' The Choices-Add tag prints any accumulated text and then launches the experimental arcade shooter mode
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    Call ArcadeShooter(game)
                    _Continue
                End If
                If (tag$ = "br") Or (tag$ = "break") Then
                    ' The Break tag prints any accumulated text and advances to the next line
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    Else
                        Locate CsrLin + 1, 1
                    End If
                    _Continue
                End If
                If tag$ = "choices-add" Then
                    ' The Choices-Add tag adds the choice(s) to the main story choices list
                    choiceCount% = ListLength%(tagValue$, "+")
                    For j% = 1 To choiceCount%
                        newChoice$ = ListPiece$(tagValue$, "+", j%)
                        game.storyChoices = ListAdd$(game.storyChoices, ",", newChoice$)
                    Next j%
                    _Continue
                End If
                If tag$ = "choices-remove" Then
                    ' The Choices-Remove tag removes the choice(s) from the main story choices list
                    choiceCount% = ListLength%(tagValue$, "+")
                    For j% = 1 To choiceCount%
                        newChoice$ = ListPiece$(tagValue$, "+", j%)
                        game.storyChoices = ListRemove$(game.storyChoices, ",", newChoice$)
                    Next j%
                    _Continue
                End If
                If tag$ = "color" Then
                    ' The Color tag prints any accumulated text and then changes the font color to the designated RGB value or resets to the scene's story color
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    If tagValue$ = "STORY" Then
                        If scene.color = _RGB(255, 255, 255) Then
                            Color _RGB(0, 0, 0) ' For readability, never use white text on the book
                        Else
                            Color scene.color
                        End If
                    Else
                        redValue% = Val(ListPiece$(tagValue$, "+", 1))
                        greenValue% = Val(ListPiece$(tagValue$, "+", 2))
                        blueValue% = Val(ListPiece$(tagValue$, "+", 3))
                        Color _RGB(redValue%, greenValue%, blueValue%)
                    End If
                    _Continue
                End If
                If tag$ = "end-page" Then
                    ' The End-Page tag prints any accumulated text and then causes an immediate termination of the page
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    isExitSet% = 1
                    Exit Do
                End If
                If tag$ = "get-input" Then
                    ' The Get-Input tag prints any accumulated text and prompts the user for an input string
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    inputLabel$ = ListPiece(tagValue$, ":", 1)
                    inputChoices$ = ListPiece(tagValue$, ":", 2)
                    userInput$ = GetInput$(game, inputLabel$, 0, 0, 40)
                    If ListContains%(inputChoices$, "+", userInput$) Then
                        action = "INPUT " + userInput$
                    Else
                        action = "INPUT ELSE"
                    End If
                    If scene.color = _RGB(255, 255, 255) Then
                        Color _RGB(0, 0, 0) ' For readability, never use white text on the book
                    Else
                        Color scene.color
                    End If
                    _Continue
                End If
                If tag$ = "goto-chapter" Then
                    ' The Goto-Chapter tag redirects the player to the designated chapter
                    game.chapter = "CHAPTER " + tagValue$
                    _Continue
                End If
                If tag$ = "hp-remove" Then
                    ' The HP-Remove tag prints any accumulated text and decreases the player's hit points
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    Call DecreaseHitPoints(game, Val(tagValue$))
                    If scene.color = _RGB(255, 255, 255) Then
                        Color _RGB(0, 0, 0) ' For readability, never use white text on the book
                    Else
                        Color scene.color
                    End If
                    _Continue
                End If
                If tag$ = "if-game-variable" Then
                    ' The If-Game-Variable tag prints any accumulated text and then sets the current action to the sub-section that matches <VARIABLE> <VALUE>
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    variable$ = tagValue$
                    variableValue$ = ""
                    If variable$ = "PLAYER" Then
                        variableValue$ = game.player
                    End If
                    action = (variable$ + " " + variableValue$)
                    _Continue
                End If
                If tag$ = "if-inventory-contains" Then
                    ' The If-Inventory-Contains tag prints any accumulated text and then sets the current action to the sub-section that matches HAS <ITEM> or NO <ITEM>
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    item$ = tagValue$
                    If ListContains%(game.inventory, ",", item$) = 1 Then
                        action = "HAS " + item$
                    Else
                        action = "NO " + item$
                    End If
                    _Continue
                End If
                If tag$ = "if-story-variable" Then
                    ' The If-Story-Variable tag prints any accumulated text and then sets the current action to the sub-section that matches <VARIABLE> <VALUE>
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    variable.name = tagValue$
                    Call StoryVariable(RETRIEVE, variable)
                    action = (variable.name + " " + variable.value)
                    _Continue
                End If
                If tag$ = "image" Then
                    ' The Image tag prints any accumulated text and displays the image(s) on the next line
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    imageLine% = CsrLin
                    imageCount% = ListLength%(tagValue$, "+")
                    For j% = 1 To imageCount%
                        imageFile$ = ListPiece$(tagValue$, "+", j%)
                        image& = _LoadImage(imageFile$)
                        Locate imageLine%, 1
                        Call DisplayImage(game, "story", image&)
                        _FreeImage image&
                    Next j%
                    _Continue
                End If
                If tag$ = "inventory-add" Then
                    ' The Inventory-Add tag prints any accumulated text and adds the item(s) to the player's inventory
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    itemCount% = ListLength%(tagValue$, "+")
                    For j% = 1 To itemCount%
                        item$ = ListPiece$(tagValue$, "+", j%)
                        Call IncreaseInventory(game, item$)
                    Next j%
                    If scene.color = _RGB(255, 255, 255) Then
                        Color _RGB(0, 0, 0) ' For readability, never use white text on the book
                    Else
                        Color scene.color
                    End If
                    _Continue
                End If
                If tag$ = "play-sound" Then
                    ' The Play-Sound tag prints any accumulated text and plays the new sound(s)
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    soundCount% = ListLength%(tagValue$, "+")
                    For j% = 1 To soundCount%
                        soundFile$ = ListPiece$(tagValue$, "+", j%)
                        soundHandle& = PlaySound&(soundFile$, 1, 0)
                        soundsCount% = soundsCount% + 1
                        soundsFiles$(soundsCount%) = soundFile$
                        soundsHandles&(soundsCount%) = soundHandle&
                    Next j%
                    _Continue
                End If
                If tag$ = "player" Then
                    ' The Player tag is translated into the name of the game's player
                    storyText$ = storyText$ + game.player
                    _Continue
                End If
                If tag$ = "press-any-key" Then
                    ' The Press-Any-Key tag prints any accumulated text and then causes the program to sleep until the player provides input
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    Call PressAnyKey(game, 1)
                    _Continue
                End If
                If tag$ = "quote" Then
                    ' The Quote tag is translated into the double quote character
                    storyText$ = storyText$ + Chr$(34)
                    _Continue
                End If
                If tag$ = "random" Then
                    ' The Random tag prints any accumulated text and sets the current action to a sub-section matching the random value
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    Randomize Timer
                    randomNumber% = Int(Rnd * Val(tagValue$)) + 1
                    action = "RANDOM " + LTrim$(Str$(randomNumber%))
                    _Continue
                End If
                If tag$ = "score-add" Then
                    ' The Score-Add tag prints any accumulated text and increases the player's score
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    Call IncreaseScore(game, Val(tagValue$))
                    If scene.color = _RGB(255, 255, 255) Then
                        Color _RGB(0, 0, 0) ' For readability, never use white text on the book
                    Else
                        Color scene.color
                    End If
                    _Continue
                End If
                If tag$ = "set-story-variable" Then
                    ' The Set-Story-Variable tag sets the target variable to the designated value
                    variable.name = ListPiece$(tagValue$, "=", 1)
                    variable.value = ListPiece$(tagValue$, "=", 2)
                    Call StoryVariable(UPDATE, variable)
                    _Continue
                End If
                If tag$ = "stop-sound" Then
                    ' The Stop-Sound tag prints any accumulated text and stops the playing sound(s)
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    soundCount% = ListLength%(tagValue$, "+")
                    For j% = 1 To soundCount%
                        soundFile$ = ListPiece$(tagValue$, "+", j%)
                        For k% = 1 To soundsCount%
                            If soundsFiles$(k%) = soundFile$ Then
                                soundHandle& = soundsHandles&(k%)
                                Call StopSound(soundHandle&)
                            End If
                        Next k%
                    Next j%
                    _Continue
                End If
                If tag$ = "story-prompt" Then
                    ' The Story-Prompt tag prints any accumulated text and prompts the user with a list of choices
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    promptLabel$ = ListPiece$(tagValue$, ":", 1)
                    promptChoices$ = ListPiece$(tagValue$, ":", 2)
                    promptChoicesCount% = ListLength%(promptChoices$, "+")
                    formattedChoices$ = ""
                    maxChoiceListLength% = 0
                    For j% = 1 To promptChoicesCount%
                        choice$ = ListPiece$(promptChoices$, "+", j%)
                        choiceListLength% = Len(choice$)
                        If choiceListLength% > maxChoiceListLength% Then
                            maxChoiceListLength% = choiceListLength%
                        End If
                        If formattedChoices$ <> "" Then
                            formattedChoices$ = formattedChoices$ + ","
                        End If
                        formattedChoices$ = formattedChoices$ + choice$
                    Next j%
                    If maxChoiceListLength% > 40 Then
                        ' TODO - Hopefully this never happens!
                        maxChoiceListLength% = 40
                    End If
                    Locate CsrLin + 1, 1
                    ' TODO - Enable arrow keys if normal level chapter.  This is being passed as 0.
                    action = StoryPrompt$(game, promptLabel$, formattedChoices$, 0, 1, maxChoiceListLength%)
                    Locate CsrLin + 2, 1

                    ' The remaining page text should now only be the sub-section for the selected choice, headed by [[choice]], and
                    ' ending with the next choice's header or the end of the page text, whichever comes first
                    ' TODO - The main for-loop needs to be updated to skip any <div> not in the selected choice's sub-section
                    ' TODO - It's kind of magical that any remaining text in the div will be processed and then subsequent divs skipped if they
                    ' don't match the target sub-section
                    _Continue
                End If
                If tag$ = "story-sound" Then
                    ' The Story-Sound tag prints any accumulated text, stops the current story sound, and then plays the new story sound in a loop
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    soundFile$ = tagValue$
                    Call StopSound(game.storySound)
                    game.storySound = PlaySound&(soundFile$, 1, 1)
                    _Continue
                End If
                If tag$ = "story-variable" Then
                    ' The Story-Variable tag prints any accumulated text and then prints the value of the variable
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    variable.name = tagValue$
                    Call StoryVariable(RETRIEVE, variable)
                    Call PrintPageText(game, "story", CsrLin, variable.value)
                    _Continue
                End If
                If tag$ = "turn-page" Then
                    ' The Next-Page tag advances to the next page in the story scene
                    game.pageNumber = game.pageNumber + 1
                    _Continue
                End If
                If tag$ = "twin" Then
                    ' The Twin tag is translated into the name of the game player's twin
                    storyText$ = storyText$ + game.twin
                    _Continue
                End If
                If tag$ = "unbreak" Then
                    ' The Unbreak tag prints any accumulated text and advances to the previous line
                    currentLine% = CsrLin
                    If storyText$ <> "" Then
                        Call PrintPageText(game, "story", CsrLin, storyText$)
                        storyText$ = ""
                    End If
                    Locate currentLine% - 1, 1
                    _Continue
                End If

                storyText$ = storyText$ + tag$ ' Not a supported tag so just show its text
            Else
                storyText$ = storyText$ + remainingDiv$
                remainingDiv$ = ""
                If storyText$ <> "" Then
                    Call PrintPageText(game, "story", CsrLin, storyText$)
                End If
            End If
        Loop Until tag$ = ""
        If isExitSet% = 1 Then
            Exit For
        End If
    Next i%

    ' Print any remaining story text
    If storyText$ <> "" Then
        Call PrintPageText(game, "story", CsrLin, storyText$)
        storyText$ = ""
    End If

    ' Reset the default font color
    Color _RGB(0, 0, 0)

    If startingAction$ = "LOOK" Then
        Print
        Call DisplayStoryPage(game, scene, page, "", 0)
    End If

    ' Stop all current play-once sounds
    For i% = 1 To soundsCount%
        soundHandle& = soundsHandles&(i%)
        Call StopSound(soundHandle&)
    Next i%
End Sub

' Display the title page
'
' Parameters:
' game - Book instance
Sub DisplayTitlePage (game As Book)
    Call TurnPage(game, 1)
    Color _RGB(139, 0, 0) ' dark red
    ' TODO - Since TurnPage() moves the cursor to row 5, can the row parameters all just be CsrLin?
    Call PrintPageText(game, "story", CsrLin, "                                   ___, ____--'")
    Call PrintPageText(game, "story", CsrLin, "                              _,-.'_,-'      (")
    Call PrintPageText(game, "story", CsrLin, "                           ,-' _.-''....____(")
    Call PrintPageText(game, "story", CsrLin, "                 ,))_     /  ,'\ `'-.     (          /\")
    Call PrintPageText(game, "story", CsrLin, "         __ ,+..a`  \(_   ) /   \    `'-..(         /  \")
    Call PrintPageText(game, "story", CsrLin, "         )`-;...,_   \(_ ) /     \  ('''    ;'^^`\ <./\.>")
    Call PrintPageText(game, "story", CsrLin, "             ,_   )   |( )/   ,./^``_..._  < /^^\ \_.))")
    Call PrintPageText(game, "story", CsrLin, "            `=;; (    (/_')-- -'^^`      ^^-.`_.-` >-'")
    Call PrintPageText(game, "story", CsrLin, "            `=\\ (                             _,./")
    Call PrintPageText(game, "story", CsrLin, "              ,\`(                         )^^^")
    Call PrintPageText(game, "story", CsrLin, "                ``;         __-'^^\       /")
    Call PrintPageText(game, "story", CsrLin, "                  / _>---^^^   `\..`-.    ``'.")
    Call PrintPageText(game, "story", CsrLin, "                 / /               / /``'`; /")
    Call PrintPageText(game, "story", CsrLin, "                / /          ,-=='-`=-'  / /")
    Call PrintPageText(game, "story", CsrLin, "          ,-=='-`=-.               ,-=='-`=-.")
    Color _RGB(0, 0, 0) ' black
    Call PrintPageText(game, "story", CsrLin, "        *******************************************")
    Call PrintPageText(game, "story", CsrLin, "                    T W I N   Q U E S T")
    halfStoryLen% = _Round(Len(game.story) / 2)
    Call PrintPageText(game, "story", CsrLin + 1, "        " + String$(22 - halfStoryLen%, " ") + game.story)
    Call PrintPageText(game, "story", CsrLin + 2, "                            b y")
    halfAuthorLen% = _Round(Len(game.author) / 2)
    Call PrintPageText(game, "story", CsrLin + 1, "        " + String$(22 - halfAuthorLen%, " ") + game.author)
    Print
    Print
    Call PressAnyKey(game, 0)
End Sub

Sub DumbAction (game As Book)
    Call PrintPageText(game, "story", CsrLin, "That is NOT a choice.  Better luck next time.")
    Print
End Sub

' Elevator action
'
' Parameters:
' game - Book instance
Sub ElevatorAction (game As Book)
    _SndStop game.storySound
    elevator& = PlaySound&("elevator-open.mp3", 1, 1)
    elevatorMusic& = PlaySound&("elevator.wav", 1, 1)
    Locate game.firstRow + 2, 1
    myleeImage& = _LoadImage("mylee.jpg")
    Call DisplayImage(game, "story", myleeImage&)
    Call PrintPageText(game, "story", CsrLin + 2, "MYLEE: " + Chr$(34) + "Oh hey kid, welcome back." + Chr$(34))
    Call PressAnyKey(game, 1)
    Call StopSound(elevator&)
    If Not Contains%(game.inventory, "GOLD", ",") Then
        Call PrintPageText(game, "story", CsrLin + 1, "MYLEE: " + Chr$(34) + "So... I noticed you don't have any GOLD.  You're not very good at following directions are you?  Off with you, human.  I have very important work to do and you're wasting my time." + Chr$(34))
        Call PrintPageText(game, "story", CsrLin + 1, "With that MYLEE flips a switch and the elevator doors open.  Hmm... seems like you're still not welcome in this elevator.  Maybe you should get some GOLD.")
        Call ReplaySound(elevator&, 1, 1) ' Elevator doors are on a loop because if the player waits to leave they should open and close multiple times
        Call PressAnyKey(game, 1)
        Call StopSound(elevatorMusic&)
        Call ReplaySound(game.storySound, 1, 1)
        Call StopSound(elevator&)
    Else
        Dim variable As Variable
        variable.name = "isDragonDead"
        Call StoryVariable(RETRIEVE, variable)
        If variable.value = "0" Then
            Call StopSound(elevatorMusic&)
            Call PrintPageText(game, "story", CsrLin + 1, "MYLEE: " + Chr$(34) + "Oh no you didn't!!!  Did you come back here with GOLD without first slaying the DRAGON???" + Chr$(34))
            Call PrintPageText(game, "story", CsrLin + 1, "You hear a thunderous sound behind you and turn to see the elevator doors burst open as a fearsome DRAGON sticks his head in and gobbles you up.  You'd like to say that at least you got the GOLD but that doesn't matter much when you're dead.")
            game.isOver = 1
        Else
            variable.name = "isCatTamed"
            Call StoryVariable(RETRIEVE, variable)
            If variable.value = "0" Then
                Call StopSound(elevatorMusic&)
                Call PrintPageText(game, "story", CsrLin + 1, "MYLEE: " + Chr$(34) + "Oh no you didn't!!!  Did you come back here with GOLD without first getting a long-range weapon from GIANNI???" + Chr$(34))
                Call PrintPageText(game, "story", CsrLin + 1, "You hear a thunderous sound behind you and turn to see the elevator doors burst open as NIGHT OWL sticks his head in and gobbles you up.  You'd like to say that at least you got the GOLD but that doesn't matter much when you're dead.")
                game.isOver = 1
            Else
                If game.player = "GREYSON" Then
                    weapon$ = "BOW & ARROWS"
                Else
                    weapon$ = "CAT-APULT"
                End If
                Call StopSound(elevatorMusic&)
                Call PrintPageText(game, "story", CsrLin + 1, "MYLEE: " + Chr$(34) + "Oh no you didn't!!!  You brought NIGHT OWL back here!!!  He wants that GOLD!!!" + Chr$(34))
                Call PrintPageText(game, "story", CsrLin + 1, "You hear a thunderous sound behind you and turn to see the elevator doors burst open as NIGHT OWL sticks his head in.  Before he can gobble you up, you hit him on the head with your trusty " + weapon$ + " and he lets out a painful, shrieking hoot.  NIGHT OWL backs away into the bright light of the WILDERNESS where you can finally fight him in a fair battle.  You march after him with your " + weapon$ + " and decide to end his reign of terror once and for all.")
                Call PrintPageText(game, "story", CsrLin + 1, "[INSERT NIGHT OWL MINI-GAME]")
                game.isOver = 1
                Call PressAnyKey(game, 1)
                Call PrintPageText(game, "story", CsrLin + 1, "You have won the game!!!")
                Call PrintPageText(game, "story", CsrLin + 1, "MAXIMUM SCORE!!!")
            End If
        End If
    End If

    ' TODO - story file needs an <arcade-shooter> tag that calls ArcadeShooter()
End Sub

Sub ExitAction (game As Book)
    game.isOver = 1
    If Contains%(game.inventory, "GOLD", ",") Then
        Call PrintPageText(game, "story", CsrLin, "But you were doing so well!  You could have tried returning the GOLD to the elevator.")
        Call PrintPageText(game, "story", CsrLin, "You found the GOLD but didn't bring it home.")
    End If
    Call PrintPageText(game, "story", CsrLin, "Your quest has ended... no fame.  And certainly no fortune.")
    Call PrintPageText(game, "story", CsrLin, "REMEMBER: Quitters never win.")
End Sub

' Get input from the user
'
' Parameters:
' game - Book instance
' prompt - Text to display
' enableArrowKeys - Enable use of the keyboard arrow keys? (1/0)
'                   Up - "MOVE AHEAD"
'                   Down - "MOVE BACKWARDS"
'                   Left - "TURN LEFT"
'                   Right - "TURN RIGHT"
' enableMouse - Enable use of the mouse? (1/0)
' maxLength - Maximum number of characters to input
'
' Returns:
' User input
Function GetInput$ (game As Book, prompt As String, enableArrowKeys As Integer, enableMouse As Integer, maxLength As Integer)
    ' TODO - When printing text on an image, the runtime won't keep track of the image area being printed on and there is no clean way
    ' to remove text without implementing something that does this via a command like GET that copies each slice of a region that could
    ' be printed on so it can be redisplayed later.
    inp$ = ""
    While _MouseInput <> 0 ' Read the mouse input until there is no more left to clear previous clicks
    Wend
    highlightedChoice$ = ""
    highlightedChoiceRow% = 0
    highlightedChoiceCol% = 0
    If enableMouse Then
        ' TODO - This is an ugly work-around to not being able to section out the mouse calculations into a subroutine
        fakeInput% = 1
    Else
        fakeInput% = 0
    End If
    cursor$ = Chr$(178)
    currentRow% = CsrLin
    If game.isRightHanded Then
        startingColumn% = game.leftPageStartingColumn ' Story page is the left-hand page
    Else
        startingColumn% = game.rightPageStartingColumn ' Story page is the right-hand page
    End If
    Color _RGB(0, 0, 0) ' black
    Locate currentRow%, startingColumn%
    Print prompt + ": "
    _PrintMode _FillBackground ' Replace background instead of displaying just text over the image
    Color _RGB(255, 255, 255), _RGB(255, 255, 255) ' white on white
    Locate currentRow%, startingColumn% + Len(prompt + ": ")
    Print String$(maxLength + 1, " ") ' Print spaces to clear the field and make all white so that a white block can be used to erase characters
    currentCol% = startingColumn% + Len(prompt + ": ")
    Locate currentRow%, currentCol%
    Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan
    Print cursor$
    c$ = ""
    While c$ <> Chr$(13)
        c$ = ""
        While (c$ = "") And (Not _MouseInput) And (Not fakeInput%)
            c$ = InKey$
        Wend
        ' If InKey$ is still empty, that means _MouseInput is set
        If c$ = "" Then
            ' Handle the mouse event
            If enableMouse Then
                If fakeInput% = 1 Then
                    fakeInput% = 0
                End If
                ' Calculate the row and column of the current mouse position
                mouseRow% = _Ceil(_MouseY / _FontHeight)
                mouseCol% = _Ceil(_MouseX / _FontWidth)
                ' The possible choices are limited to the current row
                possibleChoices$ = ""
                If (mouseRow% = game.controlChoicesRow) Then
                    possibleChoices$ = game.controlChoices
                    possibleChoicesCol% = game.controlChoicesColumn
                Else
                    If (mouseRow% = game.storyChoicesRow) Then
                        possibleChoices$ = game.storyChoices
                        possibleChoicesCol% = game.storyChoicesColumn
                    End If
                End If
                'Print "mouseRow%=" + Str$(mouseRow%) + ", mouseCol%=" + Str$(mouseCol%) + ", game.storyChoicesRow=" + Str$(game.storyChoicesRow) + ", game.storyChoicesColumn=" + Str$(game.storyChoicesColumn) + ", game.storyChoices=" + game.storyChoices
                ' Evaluate whethere there are possible choices on the current row and the mouse cursor's column position is in the range of the possible choices
                choice$ = ""
                If (possibleChoices$ <> "") And (mouseCol% >= possibleChoicesCol%) And (mouseCol% <= (possibleChoicesCol% + Len(possibleChoices$) - 1)) Then
                    choicePosition% = mouseCol% - possibleChoicesCol% + 1 ' Get the exact character position of the current choices string... 1 to the length of the choices
                    If Mid$(possibleChoices$, choicePosition%, 1) <> "," Then
                        ' Calculate rightmost character position of the current choice by looking for the next comma
                        choiceRightPos% = InStr(choicePosition%, possibleChoices$, ",")
                        If choiceRightPos% = 0 Then
                            ' There was no comma to the right of the current character so this must be the final choice
                            choiceRightPos% = Len(possibleChoices$)
                        Else
                            ' The rightmost character is 1 less than the position of the comma
                            choiceRightPos% = choiceRightPos% - 1
                        End If
                        ' Calculate leftmost character position of the current choice by looking for the previous comma
                        choiceLeftPos% = _InStrRev(choicePosition%, possibleChoices$, ",")
                        If choiceLeftPos% = 0 Then
                            ' There was no comma to the left of the current character so this must be the first choice
                            choiceLeftPos% = 1
                        Else
                            ' The leftmost character is 1 greater than the position of the comma
                            choiceLeftPos% = choiceLeftPos% + 1
                        End If
                        ' Extract the current choice using the leftmost and rightmost character positions
                        choice$ = Mid$(possibleChoices$, choiceLeftPos%, choiceRightPos% - choiceLeftPos% + 1)
                        If _MouseButton(1) = -1 Then
                            ' Handle a click using the left mouse button
                            inp$ = choice$
                            c$ = Chr$(13)
                            Locate currentRow%, currentCol%
                            Color _RGB(0, 0, 0), _RGB(255, 255, 255) ' black on white
                            Print inp$
                        Else
                            ' User only hovered over a new choice
                            If highlightedChoice$ <> choice$ Then
                                If highlightedChoice$ <> "" Then
                                    ' Remove the highlight from the last highlighted choice
                                    Locate highlightedChoiceRow%, highlightedChoiceCol%
                                    Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan on white
                                    Print highlightedChoice$
                                End If
                                ' Highlight the new choice
                                highlightedChoiceRow% = mouseRow%
                                highlightedChoiceCol% = possibleChoicesCol% + choiceLeftPos% - 1
                                Locate highlightedChoiceRow%, highlightedChoiceCol%
                                Color _RGB(0, 255, 255), _RGB(255, 255, 255) ' cyan on white
                                Print choice$
                                highlightedChoice$ = choice$
                            End If
                        End If
                    End If
                End If
                ' Handle no current choice and yet there was a highlighted choice the last time there was a mouse event
                If (choice$ = "") And (highlightedChoice$ <> "") Then
                    ' Remove the highlight from the last highlighted choice
                    Locate highlightedChoiceRow%, highlightedChoiceCol%
                    Color _RGB(0, 139, 139)
                    Print highlightedChoice$
                    highlightedChoice$ = ""
                    highlightedChoiceRow% = 0
                    highlightedChoiceCol% = 0
                End If
            End If
        Else
            If (Asc(c$) >= 32) And (Asc(c$) <= 126) Then
                ' Alphanumeric characters
                If (inp$ = "") And ((c$ = " ") Or (c$ = Chr$(13))) Then
                    ' Ignore the space key or enter key if nothing else has been entered
                Else
                    If Len(inp$) < maxLength Then
                        inp$ = (inp$ + UCase$(c$))
                        Locate currentRow%, currentCol%
                        Color _RGB(0, 0, 0), _RGB(255, 255, 255) ' black on white
                        Print UCase$(c$)
                        Locate currentRow%, currentCol% + 1
                        Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan on white
                        Print cursor$
                        currentCol% = currentCol% + 1
                    Else
                        ' Ignore any input when the string gets too long
                    End If
                End If
            Else
                ' Backspace character
                If c$ = Chr$(8) Then
                    If Len(inp$) > 0 Then
                        inp$ = Left$(inp$, Len(inp$) - 1)
                        Locate currentRow%, currentCol% - 1
                        Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan on white
                        Print cursor$ + " "
                        currentCol% = currentCol% - 1
                    Else
                        ' Ignore any backspace when there is nothing left to delete
                    End If
                Else
                    If enableArrowKeys = 1 Then
                        ' Up arrow
                        If c$ = Chr$(0) + "H" Then
                            If RTrim$(LTrim$(inp$)) = "" Then
                                inp$ = "MOVE AHEAD"
                                c$ = Chr$(13)
                                Locate currentRow%, currentCol%
                                Color _RGB(0, 0, 0), _RGB(255, 255, 255) ' black on white
                                Print inp$
                            End If
                        End If
                        ' Down arrow
                        If c$ = Chr$(0) + "P" Then
                            If RTrim$(LTrim$(inp$)) = "" Then
                                inp$ = "MOVE BACKWARDS"
                                c$ = Chr$(13)
                                Locate currentRow%, currentCol%
                                Color _RGB(0, 0, 0), _RGB(255, 255, 255) ' black on white
                                Print inp$
                            End If
                        End If
                        ' Left arrow
                        If c$ = Chr$(0) + "K" Then
                            If RTrim$(LTrim$(inp$)) = "" Then
                                inp$ = "TURN LEFT"
                                c$ = Chr$(13)
                                Locate currentRow%, currentCol%
                                Color _RGB(0, 0, 0), _RGB(255, 255, 255) ' black on white
                                Print inp$
                            End If
                        End If
                        ' Right arrow
                        If c$ = Chr$(0) + "M" Then
                            If RTrim$(LTrim$(inp$)) = "" Then
                                inp$ = "TURN RIGHT"
                                c$ = Chr$(13)
                                Locate currentRow%, currentCol%
                                Color _RGB(0, 0, 0), _RGB(255, 255, 255) ' black on white
                                Print inp$
                            End If
                        End If
                    End If
                End If
            End If
        End If
    Wend
    ' Clear the current input
    _KeyClear
    ' TODO - If the player uses the mouse to click a choice, blanking the prompt actually blanks the first character of the choice... oops
    ' Clear the cursor
    'Locate currentRow%, currentCol%
    'Print " "
    ' Trim whitespace from the beginning and end of the input string
    GetInput$ = RTrim$(LTrim$(inp$))
    If highlightedChoice$ <> "" Then
        ' Remove the highlight from the last highlighted choice
        Locate highlightedChoiceRow%, highlightedChoiceCol%
        Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan on white
        Print highlightedChoice$
    End If
    ' Reset the foreground text color and print mode of printing text over the book image
    _PrintMode _KeepBackground
    Color _RGB(0, 0, 0)
End Function

' Get the first tag in a string of text
'
' Paramters:
' text - String of text to search
' *tagStart - Starting position of the first tag character (<)
' *tagEnd - Ending position of the last tag character (>)
' *tagValue - If the tag contains a space, the value to the right of the space
'
' Returns:
' First tag
Function GetTag$ (text As String, tagStart As Integer, tagEnd As Integer, tagValue As String)
    GetTag$ = ""
    tagValue = ""
    tagStart = InStr(1, text, "<")
    If tagStart = 0 Then
        tagEnd = 0
        Exit Function
    End If
    tagEnd = InStr(tagStart, text, ">")
    If tagEnd = 0 Then
        Exit Function
    End If
    tagContents$ = Mid$(text, tagStart + 1, tagEnd - tagStart - 1)
    tag$ = LCase$(ListPiece$(tagContents$, " ", 1))
    GetTag$ = tag$
    tagValue = Mid$(tagContents$, Len(tag$) + 2, Len(tagContents$))
End Function

' Increase the player's inventory
'
' Parameters:
' game - Book instance
' item - Item to add to the inventory
Sub IncreaseInventory (game As Book, item As String)
    If Not Contains%(game.inventory, item, ",") Then
        If game.inventory = "" Then
            game.inventory = item
        Else
            game.inventory = game.inventory + "," + item
        End If
        Call ReplaySound(game.inventorySound, 1, 0)
        storyColor& = _DefaultColor
        Color _RGB(255, 140, 0)
        Call PrintPageText(game, "story", CsrLin + 1, "INVENTORY +" + item)
        storyRow% = CsrLin
        Call RefreshControlPage(game)
        Color storyColor&
        Locate storyRow%, 1
    End If
End Sub

' Increase the player's score
'
' Parameters:
' game - Book instance
' points - Number of points by which to increase the score
Sub IncreaseScore (game As Book, points As Integer)
    game.score = game.score + points
    game.experiencePoints = game.experiencePoints + points
    Call ReplaySound(game.pointsSound, 1, 0)
    storyColor& = _DefaultColor
    Color _RGB(255, 140, 0)
    Call PrintPageText(game, "story", CsrLin + 1, "SCORE +" + LTrim$(Str$(points)))
    storyRow% = CsrLin
    Call RefreshControlPage(game)
    Color storyColor&
    Locate storyRow%, 1
End Sub

' Listen action
'
' Parameters:
' game - Book instance
Sub ListenAction (game As Book)
    Dim variable As Variable
    Dim currentScene As Scene
    Call WorldScene(RETRIEVE, 1, game.level, game.playerX, game.playerY, currentScene)
    scene$ = currentScene.name

    If game.storySound = 0 Then
        Call PrintPageText(game, "story", CsrLin, "You hear nothing.")
    Else
        If _SndPlaying(game.storySound) = 0 Then
            ReplaySound game.storySound, 1, 0
        End If
        If (scene$ = "WILDERNESS") Or (scene$ = "WOODS") Or (scene$ = "MYSTERY ROOM") Or (scene$ = "MAGIC RING OF TOADSTOOLS") Or (scene$ = "GIANNI'S DEN") Or (scene$ = "MOUNT FLUFF") Or (scene$ = "CASTLE") Then
            ' Execute the LISTEN action
            Call WorldScenePage(RETRIEVE, currentScene.id, 1, pageContents$)
            Call DisplayStoryPage(game, currentScene, pageContents$, "LISTEN", 1)
        End If
        If scene$ = "DRAGON'S DEN" Then
            Color _RGB(255, 0, 0)
            variable.name = "isDragonDead"
            Call StoryVariable(RETRIEVE, variable)
            If variable.value = "0" Then
                Call PrintPageText(game, "story", CsrLin, "You hear the fearsome roar of a dragon!")
                Call PrintPageText(game, "story", CsrLin, "There is no time to stop and listen to it!")
            End If
        End If
    End If
    Color _RGB(0, 0, 0)
End Sub

' Add a value to a delimited string
'
' Parameters:
' text - Full string of text
' delimiter - Text that delimits substrings within the full string of text
' value - Delimited value to add to the string
'
' Returns:
' Delimited string with new value
Function ListAdd$ (text As String, delimiter As String, value As String)
    If ListContains%(text, delimiter, value) = 1 Then
        ListAdd$ = text
        Exit Function
    End If
    tempText$ = text
    If Right$(text, 1) <> delimiter Then
        tempText$ = tempText$ + delimiter
    End If
    tempText$ = tempText$ + value
    ListAdd$ = tempText$
End Function

' Is a given value in a delimited string? (1/0)
'
' Parameters:
' text - Full string of text
' delimiter - Text that delimits substrings within the full string of text
' value - Delimited value to find in the string
'
' Returns:
' Contains value? (1/0)
Function ListContains% (text As String, delimiter As String, value As String)
    If InStr(1, delimiter + text + delimiter, delimiter + value + delimiter) > 0 Then
        ListContains% = 1
    Else
        ListContains% = 0
    End If
End Function

' Get the delimited length of a string
'
' Parameters:
' text - Full string of text
' delimiter - Text that delimits substrings within the full string of text
'
' Returns:
' Number of delimited substrings
Function ListLength% (text As String, delimiter As String)
    currentPiece% = 1
    delimiterPos% = InStr(1, text, delimiter)
    If (delimiter = "") Or (delimiterPos% = 0) Then
        ListLength% = currentPiece%
    Else
        position% = 1
        atEnd% = 0
        delimiterLen% = Len(delimiter)
        While atEnd% = 0
            position% = delimiterPos% + delimiterLen%
            delimiterPos% = InStr(position%, text, delimiter)
            currentPiece% = currentPiece% + 1
            If delimiterPos% = 0 Then
                delimiterPos% = Len(text) + 1
                atEnd% = 1
            End If
        Wend
        ListLength% = currentPiece%
    End If
End Function

' Extract a substring for a given delimiter and index position
'
' Parameters:
' text - Full string of text to search
' delimiter - Text that delimits the subpieces in the full string
' index - Delimited position of substring
'
' Returns:
' Delimited substring
Function ListPiece$ (text As String, delimiter As String, index As Integer)
    delimiterPos% = InStr(1, text, delimiter)
    If (delimiter = "") Or (delimiterPos% = 0) Then
        ListPiece$ = text
    Else
        currentPiece% = 1
        position% = 1
        atEnd% = 0
        delimiterLen% = Len(delimiter)
        While (currentPiece% < index) And (atEnd% = 0)
            position% = delimiterPos% + delimiterLen%
            delimiterPos% = InStr(position%, text, delimiter)
            currentPiece% = currentPiece% + 1
            If delimiterPos% = 0 Then
                delimiterPos% = Len(text) + 1
                atEnd% = 1
            End If
        Wend
        ListPiece$ = Mid$(text, position%, delimiterPos% - position%)
    End If
End Function

' Remove a value from a delimited string
'
' Parameters:
' text - Full string of text
' delimiter - Text that delimits substrings within the full string of text
' value - Delimited value to remove from the string
'
' Returns:
' Delimited string without given value
Function ListRemove$ (text As String, delimiter As String, value As String)
    If ListContains%(text, delimiter, value) = 0 Then
        ListRemove$ = text
        Exit Function
    End If
    tempText$ = ""
    startPosition% = InStr(1, delimiter + text + delimiter, delimiter + value + delimiter)
    If startPosition% > 1 Then
        tempText$ = tempText$ + Mid$(text, 1, startPosition% - 1)
    End If
    If (startPosition% + Len(value) - 1) < Len(text) Then
        tempText$ = tempText$ + Mid$(text, startPosition% + Len(value) + 1, Len(text) - (Len(value) + 1))
    End If
    If Right$(tempText$, 1) = delimiter Then
        tempText$ = Mid$(tempText$, 1, Len(tempText$) - 1)
    End If
    ListRemove$ = tempText$
End Function

' Load the game story
'
' Parameters:
' game - Book instance
Sub LoadStory (game As Book)
    ' Load the story

    storyFile$ = ""
    file$ = DIR$("*.quest", fileCount%) 'use a file spec ONCE to find the last file name listed

    If fileCount% = 0 Then
        Call PrintPageText(game, "story", CsrLin, "No story files!!!")
    Else
        If fileCount% = 1 Then
            storyFile$ = file$
        Else
            ' There are multiple story files, so build a comma-delimited list of stories
            stories$ = ListPiece$(file$, ".quest", 1) ' Remove the file extension for readability
            maxListLength% = Len(file$)
            Do
                file$ = DIR$("", fileCount%) 'use an empty string parameter to return a list of files!
                If file$ <> "" Then
                    If stories$ <> "" Then
                        stories$ = stories$ + ","
                    End If
                    stories$ = stories$ + ListPiece$(file$, ".quest", 1) ' Remove the file extension for readability
                    If Len(file$) > maxListLength% Then
                        maxListLength% = Len(file$)
                    End If
                End If
            Loop Until Len(file$) = 0 'file list ends with an empty string

            oldBooks& = _LoadImage("old-books.jpg")
            turnPageSound% = 1
            Do
                Call TurnPage(game, turnPageSound%)
                Call DisplayImage(game, "story", oldBooks&)
                Locate CsrLin + 1, 1
                storyFile$ = StoryPrompt$(game, "Choose Quest", stories$, 0, 1, maxListLength%)
                turnPageSound% = 0 ' If the player enters an incorrect choice and the page is turned to reset the screen, be silent
            Loop While Not Contains%(game.storyChoices, storyFile$, ",")
            storyFile$ = storyFile$ + ".quest" ' Re-add the file extension
            _FreeImage oldBooks&
            Locate CsrLin + 3, 1
        End If
    End If

    If _FileExists(storyFile$) Then
        game.storyFile = storyFile$

        Open storyFile$ For Input As #1
        Do Until EOF(1)
            Input #1, fileLine$
            If (Mid$(fileLine$, 1, 1) = "[") And (Mid$(fileLine$, 2, 1) <> "[") Then
                ' New sections are wrapped in brackets, but not double brackets
                section$ = Mid$(fileLine$, 2, Len(fileLine$) - 2)

                ' If a new scene is being introduced, instance it as a proper WorldScene
                If Left$(section$, Len("scene")) = "scene" Then
                    sceneValue$ = ListPiece$(section$, " ", 2)
                    If Left$(sceneValue$, 3) = "id=" Then
                        sceneCoordinates$ = ListPiece$(sceneValue$, "id=", 2)
                        sceneLevel% = Val(ListPiece$(sceneCoordinates$, ",", 1))
                        sceneX% = Val(ListPiece$(sceneCoordinates$, ",", 2))
                        sceneY% = Val(ListPiece$(sceneCoordinates$, ",", 3))
                        Dim scene As Scene
                        Call WorldScene(CREATE, 1, sceneLevel%, sceneX%, sceneY%, scene)
                    End If
                End If
            Else
                If section$ = "title" Then
                    game.story = fileLine$
                    game.title = "Twin Quest: " + game.story
                    _Continue
                End If
                If section$ = "author" Then
                    game.author = fileLine$
                    _Continue
                End If
                If section$ = "credits" Then
                    If game.credits <> "" Then
                        game.credits = game.credits + "<br>"
                    End If
                    game.credits = game.credits + fileLine$
                    _Continue
                End If
                If section$ = "opening music" Then
                    game.openingMusic = fileLine$
                    _Continue
                End If
                If section$ = "high scores" Then
                    If game.highScores <> "" Then
                        game.highScores = game.highScores + "<br>"
                    End If
                    game.highScores = game.highScores + fileLine$
                    _Continue
                End If
                If section$ = "variables" Then
                    name$ = ListPiece$(fileLine$, "=", 1)
                    type$ = "Boolean" ' Only supported variable type at this time
                    value$ = ListPiece$(fileLine$, "=", 2)
                    Dim tempVariable As Variable
                    tempVariable.name = name$
                    tempVariable.type = type$
                    tempVariable.value = value$
                    Call StoryVariable(CREATE, tempVariable)
                End If
                If Left$(section$, Len("scene")) = "scene" Then
                    Call WorldScene(RETRIEVE, 1, sceneLevel%, sceneX%, sceneY%, scene)

                    sceneValue$ = ListPiece$(section$, " ", 2)

                    ' Scene header
                    If Left$(sceneValue$, 3) = "id=" Then
                        If Left$(fileLine$, 5) = "name=" Then
                            scene.name = ListPiece$(fileLine$, "=", 2)
                            Call WorldScene(UPDATE, 1, sceneLevel%, sceneX%, sceneY%, scene)
                            _Continue
                        End If
                        If Left$(fileLine$, 6) = "color=" Then
                            color$ = ListPiece$(fileLine$, "=", 2)
                            red% = Val(ListPiece$(color$, ",", 1))
                            green% = Val(ListPiece$(color$, ",", 2))
                            blue% = Val(ListPiece$(color$, ",", 3))
                            scene.color = _RGB(red%, green%, blue%)
                            Call WorldScene(UPDATE, 1, sceneLevel%, sceneX%, sceneY%, scene)
                            _Continue
                        End If
                        If Left$(fileLine$, 6) = "sound=" Then
                            sound$ = ListPiece$(fileLine$, "=", 2)
                            scene.sound = sound$
                            Call WorldScene(UPDATE, 1, sceneLevel%, sceneX%, sceneY%, scene)
                            _Continue
                        End If
                        _Continue ' Unsupported scene property
                    End If

                    ' Scene page
                    pageNumber% = Val(sceneValue$)
                    Call WorldScenePage(RETRIEVE, scene.id, pageNumber%, pageContents$)
                    If pageContents$ <> "" Then
                        pageContents$ = pageContents$ + "<div>"
                        pageContents$ = pageContents$ + fileLine$
                        Call WorldScenePage(UPDATE, scene.id, pageNumber%, pageContents$)
                    Else
                        pageContents$ = fileLine$
                        Call WorldScenePage(CREATE, scene.id, pageNumber%, pageContents$)
                    End If
                    _Continue
                End If
            End If
        Loop
        Close #1
    Else
        Call PrintPageText(game, "story", CsrLin, storyFile$ + " does not exist")
    End If

    game.level = 0
    game.levelSize = 3
    game.doorX = 2
    game.doorY = 0
    game.playerX = game.doorX
    game.playerY = game.doorY
    game.playerDirection = 3

    ' TODO - LOAD THESE INTO THE STORY FILE!!!

    'If game.player = "ZARA" Then
    '    world(1, 3) = "ZARA'S STORE"
    'Else
    '    If (game.player = "GREYSON") Or (game.player = "GREY") Then
    '        game.player = "GREYSON"
    '        world(1, 3) = "GREYSON'S GAME ROOM"
    '    Else
    '        End
    '    End If
    'End If

End Sub

' Look action
'
' Parameters:
' game - Book instance
Sub LookAction (game As Book)
    Dim variable As Variable
    Dim scene As Scene
    Call WorldScene(RETRIEVE, 1, game.level, game.playerX, game.playerY, scene)
    playerView$ = scene.name

    ' Execute the LOOK action, followed by displaying the story for the scene
    Call WorldScenePage(RETRIEVE, scene.id, 1, pageContents$)
    Call DisplayStoryPage(game, scene, pageContents$, "LOOK", 1)

    If scene.name = "DRAGON'S DEN" Then
        variable.name = "isDragonDead"
        Call StoryVariable(RETRIEVE, variable)
        If variable.value = "0" Then
            Call PrintPageText(game, "story", CsrLin, "You find yourself in a dark cave.  A fire burns deep inside.")
            Call PrintPageText(game, "story", CsrLin, "You explore the cave and find yourself face to face with a")
            Call PrintPageText(game, "story", CsrLin, "ferocious dragon!")
        Else
            If game.storySound <> 0 Then
                StopSound game.storySound
                game.storySound = 0
            End If
            Call PrintPageText(game, "story", CsrLin, "The dragon once lived here until you, an amazing hero, slew it!")
            Call PrintPageText(game, "story", CsrLin, "Paintings depicting your heroic act now cover the wall, a tribute")
            Call PrintPageText(game, "story", CsrLin, "from the townspeople you saved!")
        End If
        If (Contains%(game.inventory, "GOLD", ",")) And (Not Contains%(game.inventory, "SWORD", ",")) And (Not Contains%(game.inventory, "UNO REVERSE", ",")) Then
            Call PrintPageText(game, "story", CsrLin, "The greedy dragon sees your gold and blasts you with")
            Call PrintPageText(game, "story", CsrLin, "its burning fire.  With no defense, you are burned to death.")
            Call PrintPageText(game, "story", CsrLin, "Alas, this is the end of your quest.")
            Print
            Color _RGB(0, 0, 0)
            Call PrintPageText(game, "story", CsrLin, "You have died.")
            Call PrintPageText(game, "story", CsrLin, "Score -" + LTrim$(Str$(game.score)))
            game.score = 0
            game.isOver = 1
        Else
            If Not Contains%(game.inventory, "GOLD", ",") Then
                Call PrintPageText(game, "story", CsrLin, "With nothing heavy to carry you are able to run away")
                Call PrintPageText(game, "story", CsrLin, "before the dragon can end your quest.")
            Else
                StopSound game.storySound
                game.storySound = 0
                If (Contains%(game.inventory, "SWORD", ",")) And (variable.value = "0") Then
                    Call PrintPageText(game, "story", CsrLin, "With quick reflexes you use your mighty sword to slay the dragon.")
                    Call PrintPageText(game, "story", CsrLin, "The townspeople are saved.  And you are today a hero!!!")
                    Call IncreaseScore(game, 100)
                    Color _RGB(0, 0, 0)
                    variable.value = "1"
                    Call StoryVariable(UPDATE, variable)
                Else
                    If (Contains%(game.inventory, "UNO REVERSE", ",")) And (variable.value = "0") Then
                        Call PrintPageText(game, "story", CsrLin, "With quick reflexes you use your UNO REVERSE card to send the dragon's")
                        Call PrintPageText(game, "story", CsrLin, "flames back at it.  With each fiery burst, the dragon destroys itself.")
                        Call PrintPageText(game, "story", CsrLin, "The townspeople are saved.  And you are today a hero!!!")
                        Call IncreaseScore(game, 100)
                        Color _RGB(0, 0, 0)
                        variable.value = "1"
                        Call StoryVariable(UPDATE, variable)
                    End If
                End If
            End If
        End If
    End If

    Color _RGB(0, 0, 0) ' Restore the default color
End Sub

' Move Ahead action
'
' Parameters:
' game - Book instance
Sub MoveAheadAction (game As Book)
    Dim variable As Variable
    aheadX% = game.playerX
    aheadY% = game.playerY
    If game.playerDirection = game.directions.north Then
        aheadY% = aheadY% - 1
    End If
    If game.playerDirection = game.directions.east Then
        aheadX% = aheadX% + 1
    End If
    If game.playerDirection = game.directions.south Then
        aheadY% = aheadY% + 1
    End If
    If game.playerDirection = game.directions.west Then
        aheadX% = aheadX% - 1
    End If
    If (aheadX% = game.doorX) And (aheadY% = game.doorY) Then
        Call ElevatorAction(game)
        If game.isOver = 0 Then
            Call TurnPage(game, 1)
            Call LookAction(game)
        End If
    Else
        If (aheadX% = 0) Or (aheadX% = (game.levelSize + 1)) Or (aheadY% = 0) Or (aheadY% = (game.levelSize + 1)) Then
            Call PrintPageText(game, "story", CsrLin, "There is nothing ahead.  You are facing the edge of the world.")
            Print
            Call PrintPageText(game, "story", CsrLin, "Jumping off the edge of the world is NOT allowed in this game.")
        Else
            ' Advance the player to the next scene
            Dim lastScene As Scene
            Call WorldScene(RETRIEVE, 1, game.level, game.playerX, game.playerY, lastScene)
            lastScene$ = lastScene.name
            'lastScene$ = world(game.playerX, game.playerY)

            game.playerX = aheadX%
            game.playerY = aheadY%

            Dim newScene As Scene
            Call WorldScene(RETRIEVE, 1, game.level, game.playerX, game.playerY, newScene)
            scene$ = newScene.name
            'scene$ = world(game.playerX, game.playerY)

            ' Update the scene's sound
            If lastScene$ <> scene$ Then
                ' Stop playing the current scene's sound, if any
                If game.storySound <> 0 Then
                    StopSound game.storySound
                End If

                ' Start playing the new scene's sound, if any
                If (scene$ = "WILDERNESS") Or (scene$ = "WOODS") Or (scene$ = "MYSTERY ROOM") Or (scene$ = "MAGIC RING OF TOADSTOOLS") Or (scene$ = "GIANNI'S DEN") Or (scene$ = "MOUNT FLUFF") Then
                    game.storySound = PlaySound&(newScene.sound, 1, 1)
                End If
                If scene$ = "CASTLE" Then
                    game.storySound = PlaySound&("castle.mp3", 1, 0)
                End If
                If scene$ = "DRAGON'S DEN" Then
                    variable.name = "isDragonDead"
                    Call StoryVariable(RETRIEVE, variable)
                    If variable.value = "0" Then
                        game.storySound = PlaySound&("dragon.mp3", 1, 0)
                    Else
                        If game.storySound <> 0 Then
                            StopSound game.storySound
                            game.storySound = 0
                        End If
                    End If
                End If
            End If

            ' Add special choices specific to the new scene
            game.storyChoices = game.basicStoryChoices
            If (scene$ = "CASTLE") And (Not Contains%(game.inventory, "GOLD", ",")) Then
                game.storyChoices = game.storyChoices + ",TAKE GOLD"
            End If

            ' Refresh the scene's description
            Call LookAction(game)
        End If
    End If
End Sub

' Move Backwards action
'
' Parameters:
' game - Book instance
Sub MoveBackwardsAction (game As Book)
    Call PrintPageText(game, "story", CsrLin, "Please don't try walking backwards.  You might trip.")
End Sub

' Play a sound file
'
' Parameters:
' file - File location (WAV, OGG, or MP3 file types)
' volume - 0 to 1 value for volume (0=no sound, 1=max)
' loopSound - Play the sound in a continuous loop? (1/0)
'
' Returns:
' soundHandle&
Function PlaySound& (file As String, volume As Single, loopSound As Integer)
    soundHandle& = _SndOpen(file)
    ' TODO - ReplaySound() should be called
    If soundHandle& = 0 Then
        Beep
    Else
        _SndVol soundHandle&, volume
        _SndPlay soundHandle&
        If loopSound Then
            _SndLoop soundHandle&
        End If
    End If
    PlaySound& = soundHandle&
End Function

' Prompt the user to press the any key in order to turn the page
'
' Parameters:
' game - Book instance
' isPageBreak - Is this intended to interrupt (meaning, not end) a page? (1/0)
Sub PressAnyKey (game As Book, isPageBreak As Integer)
    ' Remember the story color
    storyColor& = _DefaultColor
    ' Display the prompt text
    Color _RGB(0, 139, 139) ' dark cyan
    curRow% = CsrLin
    ' TODO - If just a pause before flipping the page, could add forward and backwards buttons to the bottom of the story page to more effectively communicate the next step for the user
    If isPageBreak <> 0 Then
        prompt$ = "Press any key to continue"
    Else
        prompt$ = "Press any key to turn the page -->"
    End If
    promptLength% = Len(prompt$)

    If isPageBreak <> 0 Then
        Call PrintPageText(game, "STORY", curRow% + 1, prompt$)
        x1% = (game.cursor.lastColumn - 1) * _FontWidth
        x2% = x1% + (promptLength% * _FontWidth)
        y1% = (curRow%) * _FontHeight
        y2% = y1% + (_FontHeight)
        background& = _NewImage(x2% - x1%, y2% - y1%, 32) ' Init the text cover by matching the size of the printed text area
        _PutImage (0, 0), game.image, background&, (x1%, y1%)-(x2%, y2%) ' Copy the exact coordinates from the book image to the text cover
    Else
        Call PrintPageText(game, "STORY", game.lastRow - 1, prompt$)
    End If
    ' TODO - Refactor this so the mouse can be used to click the text
    ' Suspend program execution until the any key is pressed
    Sleep
    _KeyClear
    If isPageBreak <> 0 Then
        _PutImage (x1%, y1%), background&, 0 ' Copy the full contents of the text cover to the screen using the exact coordinates of the printed text area
        _FreeImage background&
    End If
    ' Reposition the cursor
    Color storyColor& ' Restore the story color
    Locate curRow%, 1
End Sub

' Print text on a designated book page
'
' Parameters:
' game - Book instance
' page - (STORY/CONTROL) Which page of the book to use
' row - Text row
' text - Text to print
Sub PrintPageText (game As Book, page As String, row As Integer, text As String)
    lastColumn = 0

    ' Determine the starting position for the text based on the designated page
    page = UCase$(page)
    If ((page = "STORY") And (game.isRightHanded = 1)) Or ((page = "CONTROL") And (game.isRightHanded = 0)) Then
        If (text = "Press any key to continue") Or (text = "Press any key to turn the page -->") Then
            ' TODO - The text should really be something like a constant
            column% = (game.leftPageStartingColumn + game.maxPageLength) - Len(text) - 4
        Else
            column% = game.leftPageStartingColumn
        End If
    Else
        If ((page = "STORY") And (game.isRightHanded = 0)) Or ((page = "CONTROL") And (game.isRightHanded = 1)) Then
            If (row = game.firstRow) Or (text = "Press any key to continue") Then
                ' By convention, right-align text on the first row of the right-hand page
                column% = (game.rightPageStartingColumn + game.maxPageLength) - Len(text)
            Else
                column% = game.rightPageStartingColumn
            End If
        Else
            If 1 / 0 Then
                ' Let the programmer know they passed something... sinister
            End If
        End If
    End If

    ' Wrap the text to make it fit the pages.
    startingTextLength = 0
    Do
        Locate row, column%
        game.cursor.lastColumn = column%
        textLength = Len(text)
        If startingTextLength = 0 Then
            startingTextLength = textLength
        End If
        If textLength > game.maxPageLength Then
            ' Word wrap
            firstSpacePosition = _InStrRev(game.maxPageLength, text, " ")
            If firstSpacePosition > 0 Then
                ' Display all characters up to the first space at or to the left of position 66
                Print Left$(text, firstSpacePosition)
                text = LTrim$(Mid$(text, firstSpacePosition + 1, textLength))
            Else
                ' Display as many characters of the text that can fit on the line plus a hyphen
                Print Left$(text, game.maxPageLength - 1) + "-"
                text = LTrim$(Mid$(text, game.maxPageLength, textLength))
            End If
        Else
            ' All text can fit on the current line
            If startingTextLength = textLength Then
                ' Allow the text to begin with one or more spaces if this is the first (non-wrapped) text line
                Print text
            Else
                Print LTrim$(text)
            End If
            text = ""
        End If
        row = row + 1
    Loop Until text = ""

    If page = "STORY" Then
        game.cursor.lastStoryRow = CsrLin
    Else
        game.cursor.lastControlRow = CsrLin
    End If
End Sub

' Refresh the control page
'
' Parameters:
' game - Book instance
Sub RefreshControlPage (game As Book)
    Color _RGB(146, 146, 146) ' darker grey
    firstRow% = game.firstRow + 2
    Call PrintPageText(game, "control", firstRow%, "_" + game.player + String$(62 - Len(game.player), "_"))
    Color _RGB(0, 0, 0) ' black
    Call PrintPageText(game, "control", CsrLin, "Score: " + LTrim$(Str$(game.score)))
    Call PrintPageText(game, "control", CsrLin, "Inventory: " + game.inventory)
    Print
    Call PrintPageText(game, "control", CsrLin, "HP:" + Str$(game.hitPoints))
    Call PrintPageText(game, "control", CsrLin, "MP:" + Str$(game.magicPoints))
    Call PrintPageText(game, "control", CsrLin, "XP:" + Str$(game.experiencePoints))
    Color _RGB(146, 146, 146) ' darker grey
    Call PrintPageText(game, "control", CsrLin, "_______________________________________________________________")
    Color _RGB(0, 0, 0) ' black
    Print

    ' TODO - Refactor this out
    Dim playerSymbol(4) As String
    playerSymbol(1) = "^"
    playerSymbol(2) = ">"
    playerSymbol(3) = "v"
    playerSymbol(4) = "<"

    ' Display the map
    Dim mapInfo(5) As String ' TODO - Refactor this out
    directionWord$ = ""
    If game.playerDirection = game.directions.north Then
        directionWord$ = "North"
    End If
    If game.playerDirection = game.directions.east Then
        directionWord$ = "East"
    End If
    If game.playerDirection = game.directions.south Then
        directionWord$ = "South"
    End If
    If game.playerDirection = game.directions.west Then
        directionWord$ = "West"
    End If
    For i% = 1 To 5 Step 1
        mapInfo(i%) = ""
    Next
    If (game.playerX > 0) And (game.playerY > 0) And (game.isOver = 0) Then
        mapInfo(1) = "Level: " + LTrim$(Str$(game.level))
        mapInfo(2) = "Location: " + LTrim$(Str$(game.playerX)) + "," + LTrim$(Str$(game.playerY))
        mapInfo(3) = "Facing: " + directionWord$
    End If
    Call PrintPageText(game, "control", CsrLin, String$((game.levelSize - 1) / 2, " ") + "Map")
    curRow% = CsrLin
    Call PrintPageText(game, "control", CsrLin, String$(game.levelSize + 2, "-")) ' Top border

    Dim scene As Scene
    For y% = 1 To game.levelSize
        'Call PrintPageText(game, "control", CsrLin, "|" + String$(game.levelSize, " ") + "|" + "   " + mapInfo(y%))
        Call PrintPageText(game, "control", CsrLin, "|")
        If game.level > 0 Then
            _PrintMode _FillBackground
            For x% = 1 To game.levelSize
                Call WorldScene(RETRIEVE, 1, game.level, x%, y%, scene)
                Color , scene.color
                Locate CsrLin - 1, game.cursor.lastColumn + x%
                Print " "
            Next x%
            _PrintMode _KeepBackground
        End If
        Locate CsrLin - 1, game.cursor.lastColumn + game.levelSize + 1
        Color _RGB(0, 0, 0)
        Print "|" + "   " + mapInfo(y%)
    Next y%

    Call PrintPageText(game, "control", CsrLin, String$(game.levelSize + 2, "-")) ' Bottom border

    nextRow% = CsrLin
    Locate curRow% + game.doorY, game.doorX + game.cursor.lastColumn
    Print "*"
    If (game.isOver = 0) And (game.playerX > 0) And (game.playerY > 0) Then
        symbol$ = playerSymbol(game.playerDirection)
        Call WorldScene(RETRIEVE, 1, game.level, game.playerX, game.playerY, scene)
        If scene.color = _RGB(255, 255, 255) Then
            Color _RGB(0, 0, 0) ' For readability, don't print white text on a white background
        Else
            Color _RGB(255, 255, 255)
        End If
        Locate curRow% + game.playerY, game.playerX + game.cursor.lastColumn
        Print symbol$
    End If
    Color _RGB(0, 0, 0)
    Locate nextRow%, 1

    ' Display game control choices
    If Contains%(game.inventory, "GAME BOOK", ",") Then
        Color _RGB(0, 0, 0) ' black
        Locate game.cursor.lastControlRow + 1, 1
        game.controlChoicesRow = CsrLin + 1
        gamePrompt$ = "Game Choices: "
        Call PrintPageText(game, "control", CsrLin, gamePrompt$)
        _PrintMode _FillBackground ' Replace background instead of displaying just text over the image
        Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan on white
        controlChoices$ = game.controlChoices
        Call PrintPageText(game, "control", CsrLin, controlChoices$)
        game.controlChoicesColumn = game.cursor.lastColumn
        _PrintMode _KeepBackground
        Color _RGB(0, 0, 0)
        Call PrintPageText(game, "control", CsrLin, "[Use arrow keys to turn and move]")
    End If
End Sub

' Refresh the story page by evaluating a choice from the player
'
' Parameters:
' game - Book instance
' choice - Player's selected choice
Sub RefreshStoryPage (game As Book, choice As String)
    If (Not Contains%(game.storyChoices, choice, ",")) And (Not Contains%(game.controlChoices, choice, ",")) And (Not Contains%(game.secretChoices, choice, ",")) Then
        Call TurnPage(game, 0)
        If choice <> "" Then
            ' Handle invalid choice
            Call DumbAction(game)
        End If
    Else
        ' Reset the screen
        Call TurnPage(game, 1)
        ' Handle valid choices
        If choice = "EXIT GAME" Then
            Call ExitAction(game)
        End If
        If choice = "LOOK" Then
            Call LookAction(game)
        End If
        If choice = "CREDITS" Then
            Call DisplayCreditsPage(game)
            choice = "LOOK"
            Call TurnPage(game, 1)
            Call LookAction(game)
        End If
        If choice = "HIGH SCORES" Then
            Call DisplayHighScoresPage(game)
            choice = "LOOK"
            Call TurnPage(game, 1)
            Call LookAction(game)
        End If
        If choice = "FLIP BOOK" Then
            If game.isRightHanded = 0 Then
                game.isRightHanded = 1
            Else
                game.isRightHanded = 0
            End If
            Call TurnPage(game, 0)
            Call LookAction(game)
        End If
        If choice = "GO RIGHT-HANDED" Then
            game.isRightHanded = 1
            game.controlChoices = "CREDITS,GO LEFT-HANDED,HIGH SCORES,EXIT GAME"
            Call TurnPage(game, 0)
            Call LookAction(game)
        End If
        If choice = "LISTEN" Then
            Call ListenAction(game)
        End If
        If choice = "MOVE AHEAD" Then
            Call MoveAheadAction(game)
        End If
        If choice = "MOVE BACKWARDS" Then
            Call MoveBackwardsAction(game)
        End If
        If choice = "TURN LEFT" Then
            Call TurnLeftAction(game)
        End If
        If choice = "TURN RIGHT" Then
            Call TurnRightAction(game)
        End If
        If (choice = "CHASE BUNNIES") Or (choice = "SPEAK NAME") Or (choice = "PLAY GAME") Or (choice = "TAME FLUFF") Or (choice = "TAKE GOLD") Or (choice = "NIGHT OWL") Then
            Dim scene As Scene
            Call WorldScene(RETRIEVE, 1, game.level, game.playerX, game.playerY, scene)
            Call WorldScenePage(RETRIEVE, scene.id, 1, pageContents$)
            Color scene.color
            Call DisplayStoryPage(game, scene, pageContents$, choice, 1)
        End If
        If (choice = "ALL THE THINGS") Then
            Call AllTheThingsAction(game)
        End If
    End If
End Sub

' Replay an already open sound file
'
' Parameters:
' soundHandle - LONG-type sound handle returned by PlaySound&
' volume - 0 to 1 value for volume (0=no sound, 1=max)
' loopSound - Play the sound in a continuous loop? (1/0)
Sub ReplaySound (soundHandle As Long, volume As Single, loopSound As Integer)
    If soundHandle& = 0 Then
        Beep
    Else
        _SndVol soundHandle&, volume
        _SndPlay soundHandle&
        If loopSound Then
            _SndLoop soundHandle&
        End If
    End If
End Sub

' Stop playing a sound file
'
' Parameters:
' soundHandle - LONG-type sound handle returned by PlaySound&
Sub StopSound (soundHandle As Long)
    If soundHandle <> 0 Then
        _SndStop soundHandle
        _SndClose soundHandle
    End If
End Sub

' Prompt the player for a story choice
'
' Parameters:
' game - Book instance
' prompt - Prompt text
' choices - Comma-delimited prompt choices
' enableArrowKeys - Enable use of the keyboard arrow keys? (1/0)
'                   Up - "MOVE AHEAD"
'                   Down - "MOVE BACKWARDS"
'                   Left - "TURN LEFT"
'                   Right - "TURN RIGHT"
' enableMouse - Enable use of the mouse? (1/0)
' inputLength - Max number of characters allowed for user input
'
' Returns:
' User input
Function StoryPrompt$ (game As Book, prompt As String, choices As String, enableArrowKeys As Integer, enableMouse As Integer, inputLength As Integer)
    prompt = prompt + ": "
    game.storyChoices = choices
    startingRow% = CsrLin
    game.storyChoicesRow = startingRow% + 1
    Call PrintPageText(game, "story", startingRow%, prompt)
    _PrintMode _FillBackground ' Replace background instead of displaying just text over the image
    Color _RGB(0, 139, 139), _RGB(255, 255, 255) ' dark cyan on white
    pageChoicesText$ = game.storyChoices ' TODO - This is dumb.  All variables passed to a function are passed by reference.  PrintPageText() will empty out the game.storyChoices if you pass them directly.
    Call PrintPageText(game, "story", CsrLin, pageChoicesText$)
    game.storyChoicesColumn = game.cursor.lastColumn
    _PrintMode _KeepBackground
    Print
    StoryPrompt$ = GetInput$(game, "Enter Choice", enableArrowKeys, enableMouse, inputLength)
End Function

' Story Variable Class
'
' Parameters:
' event - Collection event integer (CREATE, RETRIEVE, UPDATE, DELETE, EXISTS)
' *variable - Variable instance
Sub StoryVariable (event As Integer, variable As Variable)
    Static variableCount As Integer, variables() As Variable

    If event <> RETRIEVE Then
        Dim currentVariable As Variable
        currentVariable.name = variable.name
        Call StoryVariable(RETRIEVE, currentVariable)
    End If

    If event = CREATE Then
        If currentVariable.id > 0 Then
            ' The variable already exists so handle this as an UPDATE event
            variable.id = currentVariable.id
            Call StoryVariable(UPDATE, variable)
        Else
            variableCount = variableCount + 1
            If variableCount = 1 Then
                ' One time only array init
                Dim variables(1 To 100) As Variable
            End If
            variable.id = variableCount
            variables(variable.id) = variable
        End If
    End If
    If event = RETRIEVE Then
        found = 0
        For i = 1 To variableCount
            currentVariable = variables(i)
            If variable.name = currentVariable.name Then
                found = 1
                Exit For
            End If
        Next i
        If found = 1 Then
            variable = currentVariable
        End If
    End If
    If event = UPDATE Then
        If currentVariable.id > 0 Then
            variable.id = currentVariable.id
            variables(variable.id) = variable
        Else
            ' The variable does not already exist so handle this as a CREATE event
            Call StoryVariable(CREATE, variable)
        End If
    End If
    If event = DELETE Then
        ' Unsupported at this time
    End If
End Sub

' Turn Left action
'
' Parameters:
' game - Book instance
Sub TurnLeftAction (game As Book)
    game.playerDirection = game.playerDirection - 1
    If game.playerDirection = 0 Then
        game.playerDirection = 4
    End If
    Call LookAction(game)
End Sub

' Wipe the current screen and redisplay the book image
'
' Parameters:
' game - Book instance
' playPageSound - Play the page turn sound? (1/0)
Sub TurnPage (game As Book, playPageSound As Integer)
    If playPageSound Then
        ' Play a sound for turning the page
        Call ReplaySound(game.pageTurnSound, 1, 0)
    End If

    Cls , _RGB(0, 0, 0) ' Clear screen with black as the background color
    _PutImage , game.image ' Display the main book image
    _PrintMode _KeepBackground ' Preserve the image background when printing text
    Color _RGB(0, 0, 0) ' black

    ' Print the page headers (the book image allows for text starting on row 3)
    If game.chapter <> "" Then
        ' TODO - Need to right-align the text on the right-hand page
        Call PrintPageText(game, "story", (game.firstRow), UCase$(game.chapter))
        Call PrintPageText(game, "control", (game.firstRow), UCase$(game.title))
    End If

    ' All non-header text should begin on row 5 to accommodate the book image
    Locate game.firstRow + 2, 1
End Sub

' Turn Right action
'
' Parameters:
' game - Book instance
Sub TurnRightAction (game As Book)
    game.playerDirection = game.playerDirection + 1
    If game.playerDirection = 5 Then
        game.playerDirection = 1
    End If
    Call LookAction(game)
End Sub

' World Scene Class
'
' Parameters:
' event - Collection event integer (CREATE, RETRIEVE, UPDATE, DELETE, EXISTS)
' world - World number
' Level - Level number
' x - x-coordinate
' y - y-coordinate
' *scene - Scene instance
Sub WorldScene (event As Integer, world As Integer, level As Integer, x As Integer, y As Integer, scene As Scene)
    Static sceneCount As Integer, scenes() As Scene

    If event = CREATE Then
        sceneCount = sceneCount + 1
        If sceneCount = 1 Then
            ' One time only array init
            Dim scenes(1 To 10, 0 To 10, 0 To 10, 0 To 10) As Scene
        End If
        scene.id = sceneCount
        scenes(world, level, x, y) = scene
        ' Initialize the scene's pages
        For pageNumber% = 1 To 10
            Call WorldScenePage(CREATE, scene.id, pageNumber%, "")
        Next pageNumber%
    End If
    If event = RETRIEVE Then
        scene = scenes(world, level, x, y)
    End If
    If event = UPDATE Then
        scenes(world, level, x, y) = scene
    End If
    If event = DELETE Then
        ' Unsupported at this time
    End If
End Sub

' World Scene Page Class
'
' Parameters:
' sceneId - Scene Id
' pageNumber - Page number
' *contents - Full text and tags of page contents
Sub WorldScenePage (event As Integer, sceneId As Integer, pageNumber As Integer, contents As String)
    Static pageCount As Integer, pages() As String

    If event = CREATE Then
        pageCount = pageCount + 1
        If pageCount = 1 Then
            ' One time only array init
            Dim pages(1 To 1000, 1 To 10) As String
        End If
        pages(sceneId, pageNumber) = contents
    End If
    If event = RETRIEVE Then
        contents = pages(sceneId, pageNumber)
    End If
    If event = UPDATE Then
        pages(sceneId, pageNumber) = contents
    End If
    If event = DELETE Then
        ' Unsupported at this time
    End If
End Sub


